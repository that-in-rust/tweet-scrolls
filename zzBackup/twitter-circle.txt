├── .gitignore
├── LICENSE
├── README.md
├── direct-messaging-stats
    ├── chart_draw.html
    ├── dm_final_stats_processing.js
    └── dm_single_id_check.js
├── dm_stats.html
├── experiments_backups
    ├── compute_mentions.js
    ├── extract_mentions_and_dump_backup.js
    ├── index_backupv1.html
    ├── index_html_proper_centering_backup_latest.js
    ├── twitterpfpfetcher.js
    └── user_name_to_user_id.js
├── extract_mentions_and_dump.js
├── index.html
├── leaderboard.html
├── package-lock.json
├── package.json
├── pfp_fetch_and_id_correction.js
├── preprocess_direct-messages.js
├── setup.sh
├── start_server.js
├── static
    ├── example2.png
    ├── image.png
    ├── twitter-circle.png
    └── user_example.png
└── utils
    └── fetch_user_id_to_user_name.js


/.gitignore:
--------------------------------------------------------------------------------
 1 | node_modules
 2 | .DS_STORE
 3 | mentions_count_folder
 4 | twitter-archive
 5 | .*
 6 | *.json
 7 | !package.json
 8 | !package-lock.json
 9 | bun.lockb
10 | 


--------------------------------------------------------------------------------
/LICENSE:
--------------------------------------------------------------------------------
 1 | MIT License
 2 | 
 3 | Copyright (c) 2024 Sankalp 
 4 | 
 5 | Permission is hereby granted, free of charge, to any person obtaining a copy
 6 | of this software and associated documentation files (the "Software"), to deal
 7 | in the Software without restriction, including without limitation the rights
 8 | to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 9 | copies of the Software, and to permit persons to whom the Software is
10 | furnished to do so, subject to the following conditions:
11 | 
12 | The above copyright notice and this permission notice shall be included in all
13 | copies or substantial portions of the Software.
14 | 
15 | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
16 | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
17 | FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
18 | AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
19 | LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
20 | OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
21 | SOFTWARE.
22 | 


--------------------------------------------------------------------------------
/README.md:
--------------------------------------------------------------------------------
  1 | # Twitter Circle
  2 | 
  3 | 
  4 | 
  5 | 
  6 | ![Twitter Circle](static/example2.png)
  7 | 
  8 | ## A tool to visualize your Twitter network and direct messaging history
  9 | 
 10 | ### Features
 11 | 
 12 | 1. **Make a Twitter Circle visualization** for up to 200 users.
 13 | 2. **Check leaderboard** based on combined weights of *all* your mentions of other users and *all* direct messages.
 14 | 3. **Check DM stats** message count per recipient, messages sent/received per user, total messages, last message with them
 15 | 4. **DM bar graph** where you can see messages/month for 5 years data.
 16 | 
 17 | 
 18 | 
 19 | ## Table of Contents
 20 | 
 21 | 1. [Twitter Circle](#twitter-circle)
 22 |    - [Features](#features)
 23 |    - [Setup](#setup)
 24 |    - [Troubleshooting](#troubleshooting)
 25 | 2. [Share screenshots and tag your inner circle!](#share-screenshots-and-tag-your-inner-circle)
 26 | 3. [How Twitter Circle Works](#how-twitter-circle-works)
 27 |    - [Tech stack](#tech-stack)
 28 |    - [Relevant files used from Twitter archive](#relevant-files-used-from-twitter-archive)
 29 |    - [Flow of execution](#flow-of-execution)
 30 |      1. [extract_mentions_and_dump.js](#1-extract_mentions_and_dumpjs)
 31 |      2. [preprocess_direct-messages.js](#2-preprocess_direct-messagesjs)
 32 |      3. [pfp_fetch_and_id_correction.js](#3-pfp_fetch_and_id_correctionjs)
 33 |      4. [dm_final_stats_processing.js](#4-dm_final_stats_processingjs)
 34 |      5. [index.html](#5-indexhtml)
 35 |      6. [leaderboard.html](#6-leaderboardhtml)
 36 |      7. [dm_stats.html](#7-dm_statshtml)
 37 |      8. [chart_draw.html](#8-chart_drawhtml)
 38 |    - [Solving for username to user id mapping without scraping](#solving-for-username-to-user-id-mapping-without-scraping)
 39 |    - [Bugs and Limitations](#bugs-and-limitations)
 40 | 
 41 | 
 42 | ### Setup
 43 | 
 44 | 
 45 | If you have already cloned, please do a `git pull`
 46 | 
 47 | 1. **Download your Twitter archive.**
 48 | 
 49 |    - Go to: `More (3 dot button) > Settings and Privacy > Your Account > Download an archive of your data`.
 50 |    - Note: It takes around 1-2 days for Twitter to prepare your archive data.
 51 | 
 52 |    **Clone the repository:**
 53 | 
 54 |    ```bash
 55 |    git clone https://github.com/sankalp1999/twitter-circle.git
 56 |    ```
 57 | 
 58 | 2. **Copy your Twitter archive (extracted folder, not the zip file) into the project folder and rename the extracted folder to `twitter-archive`.** You have to ensure the archive is on the root folder of the project.
 59 | 
 60 | 3. **Install Node.js (for Linux and MacOS)**
 61 | 
 62 |    - Visit the official Node.js website: <https://nodejs.org>
 63 |    - Download the appropriate version for your operating system.
 64 |    - Follow the installation instructions provided on the website.
 65 | 
 66 | 4. **Install project dependencies**
 67 | 
 68 |    ```bash
 69 |    npm install
 70 |    ```
 71 | 
 72 |    This command will install all the necessary packages listed in the `package.json` file.
 73 | 
 74 | 5. **Set up the project**
 75 | 
 76 |    ```bash
 77 |    ./setup.sh
 78 |    ```
 79 | 
 80 |    For **Windows**, you will require git bash or WSL to run above bash script.
 81 | 
 82 | 6. **Start the application**
 83 | 
 84 |    ```bash
 85 |    npm start
 86 |    ```
 87 | 
 88 |    This command will start the Twitter Circle application. **Share screenshots of your top 100 now! If you liked it, please star the repo.**
 89 | 
 90 | 
 91 |    
 92 | 
 93 | ### **Troubleshooting :**
 94 | 
 95 |  First step if not working, do a `git pull` and just re-run the script `./setup.sh`
 96 | 
 97 |  If still not working, raise an issue or contact me [https://twitter.com/dejavucoder](https://twitter.com/dejavucoder) 
 98 | 
 99 | 
100 | #### Known Issues
101 | 
102 | **Update 16th June**
103 | 
104 | Most problems will happen at the scraping stage. I don't directly scrape profile pics from Twitter.
105 | I currently scrape from muskviewer.com. You should be able to scrape once properly. If you try
106 | a second scrape immediately, then you may get rate limited.
107 | 
108 | Earlier I was using twstalker.com which now has cloudfare bot detection. If you could help me get 
109 | around this, I am open to a PR.
110 | 
111 | 1. The frontend tweet webviewer website may be down. you can check by twstalker.com/your_user_name. In this case, you can try
112 | later or try changing line 146 in `pfp_fetch_and_id_correction.js`. `if (isReachablePrimary)` to `if (false)`
113 | 
114 | 2. Profile pictures not rendering 
115 | 
116 |    a. Browser dependencies are missing - check https://pptr.dev/troubleshooting
117 | 
118 |    For Linux, WSL etc. check [here](https://pptr.dev/troubleshooting#running-puppeteer-on-wsl-windows-subsystem-for-linux).
119 | 
120 |    Error may look like below (it's from WSL)
121 | 
122 |    ``` 
123 |    UnhandledPromiseRejectionWarning: Error: Failed to launch the browser process!
124 | 
125 |    /your_username/.cache/puppeteer/chrome-linux-122.0.6261.69/chrome-linux/chrome: error while loading shared libraries: libatk-1.0.so.0: cannot open shared object file: No such file or directory
126 | 
127 | 
128 |    TROUBLESHOOTING: https://pptr.dev/troubleshooting 
129 |    ```
130 | 
131 |    b. Browser launch process fail because chromium path not set (Linux, M1 Macs)
132 |    
133 |    Find your chromium path and please set it like below example
134 | 
135 |    around line 211 in `pfp_fetch_and_id_correction.js`
136 | 
137 |    ```
138 |    const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox', '--disable-setuid-sandbox'], executablePath: 'usr/bin/chromium-browser' })
139 |    ```
140 | 
141 |    
142 | 2. **Chrome or Safari** are recommended. Edge has CORS issue.
143 | 
144 | ## Share screenshots and tag your inner circle!
145 | 
146 | **Don't forget to share screenshots** of your top 50, 100 whatever you feel like
147 | 
148 | Tag your inner circle in reply
149 | 
150 | **Zoom out** browser enough to let the images fit in and please exclude slider
151 | for better screenshot.
152 | 
153 | If you are feeling courageous, I dare you to share your DM stats leaderboard screenshots.
154 | 
155 | 
156 | ## How Twitter Circle Works
157 | 
158 | ### Tech stack
159 | 
160 | - Vanilla HTML/CSS/JS
161 | - Puppeteer to get profile pictures
162 | - D3.js for drawing the twitter circle
163 | - chart.js for drawing the graphs
164 | 
165 | Tried to keep complexity and dependencies at minimum
166 | 
167 | ### Relevant files used from Twitter archive
168 | 
169 | - `account.js` - Details of your account like accountId and userhandle/screenname 
170 | - `tweets.js` - All your tweets (normal tweet, replies, quote tweets) with data like reply mentions, quote tweet url, text, media url
171 | - `direct-messages.js` - All your personal messages, no group chat messages
172 | 
173 | 
174 | ```mermaid
175 | graph TD
176 | A[Extract mentions and quote tweets] --> B[Create user ID to screen name mapping]
177 | A --> C[Calculate weighted scores based on frequency and recency]
178 | D[Read direct messaging data] --> E[Extract DM data and calculate basic stats]
179 | D --> F[Compute DM weights]
180 | F --> G[Combine DM weights with mention weights]
181 | G --> H[Take top N users]
182 | H --> I[Fetch profile picture CDN URLs for top N users]
183 | H --> J[Attempt to correct missing user IDs]
184 | J --> K[Update ID-to-username mapping]
185 | K --> L[Create interactive visualization of Twitter circle]
186 | K --> M[Display ranking of friends based on combined weights]
187 | D --> N[Process data to count messages per month for past 5 years]
188 | N --> O[Prepare data for visualizing DM history graph]
189 | O --> P[Display table of DM statistics per recipient]
190 | P --> Q[Display bar graph of monthly message counts for selected recipient]
191 | 
192 | style A fill:#ff9980
193 | style B fill:#ff9980
194 | style C fill:#ff9980
195 | style D fill:#80b3ff
196 | style E fill:#80b3ff
197 | style F fill:#80b3ff
198 | style G fill:#b3d9ff
199 | style H fill:#cccccc
200 | style I fill:#cccccc
201 | style J fill:#cccccc
202 | style K fill:#e6e6e6
203 | style L fill:#b3ffb3
204 | style M fill:#b3ffb3
205 | style N fill:#ffff99
206 | style O fill:#ffff99
207 | style P fill:#ffcc99
208 | style Q fill:#ffcc99
209 | ```
210 | 
211 | 
212 | ### Flow of execution
213 | 
214 | ```mermaid
215 | graph TD
216 |     A(Read tweets.js) --> B(Extract mentions and quote tweets)
217 |     B --> C(Create user ID to screen name mapping)
218 |     B --> D(Calculate mentions weights)
219 |     D --> E(Save weights to mentionsCountWeighted.json)
220 |     F(Read direct-messages.js) --> G(Extract DM data)
221 |     G --> H(Calculate DM stats)
222 |     H --> I(Calculate DM weights)
223 |     I --> J(Combine DM weights with mentions weights)
224 |     J --> K(Save combined weights to sortedCombinedWeights.json)
225 |     K --> L(Read sortedCombinedWeights.json)
226 |     L --> M(Fetch top N users' profile pictures)
227 |     M --> N(Correct missing user IDs)
228 |     N --> O(Save updated data to final_weights_with_pics.json)
229 |     G --> P(Process DM data for visualization)
230 |     P --> Q(Save DM stats with chart data to dm_final_stats_with_chart.json)
231 |     O --> R(Load data in index.html for D3.js visualization)
232 |     O --> S(Load data in leaderboard.html for ranking display)
233 |     Q --> T(Load data in dm_stats.html for DM stats table)
234 |     T --> U(Click on a row to view DM history)
235 |     U --> V(Load specific recipient's data in chart_draw.html for DM history graph)
236 | 
237 |     classDef script fill:#f9f,stroke:#333,stroke-width:4px;
238 |     classDef data fill:#ccf,stroke:#333,stroke-width:2px;
239 |     classDef webpage fill:#cfc,stroke:#333,stroke-width:2px;
240 | 
241 |     class A,B,F,G script;
242 |     class C,D,E,H,I,J,K,N,O,P,Q data;
243 |     class R,S,T,U,V webpage;
244 | ```
245 | 
246 | 1. `extract_mentions_and_dump.js`:
247 |    - Reads `tweets.js` from the user's Twitter archive.
248 |    - Extracts mentions and quote tweets from the tweet data.
249 |    - Creates a mapping between user IDs and screen names and saves it to `user_mentions_screen_name_mapping.json`.
250 |    - Calculates weighted scores based on the frequency and recency of interactions and saves them to `mentions_count_folder/mentionsCountWeighted.json`.
251 | 
252 |    Scores are based on *your* replies and quote tweets. I sum up the mentions and apply a weighing mechanism based on time difference to ensure the relevance of interactions. Recent interactions get slightly more weightage. This is because we perceive people we interacted with recently to be closer to us - the time weight heuristic is provided to account for the recency bias
253 | 
254 |    The mapping between user IDs and screen names is to avoid scraping. This mapping is required as the direct messaging data contains only accountIds (and no usernames)
255 |    
256 |    The mapping will work if you have replied to the person at least once otherwise their accountId won't be known. There is a scraping workaround but I avoid it as it takes time plus want to keep scraping at minimum. see `utils/fetch_user_id_to_user_name.js`
257 | 
258 | 2. `preprocess_direct-messages.js`:
259 |    - Reads `direct-messages.js` from the user's Twitter archive.
260 |    - Extracts direct messaging data and processes *all* of it to calculates basic stats (total messages, messages sent/received per user).
261 |    - Computes DM weights using a weighing mechanism similar to the mentions.
262 |    - Combines the DM weights with the existing weights from `mentions_count_folder/mentionsCountWeighted.json` and saves the result to `sortedCombinedWeights.json`.
263 | 
264 | 3. `pfp_fetch_and_id_correction.js`:
265 |    - Reads `sortedCombinedWeights.json` and takes the top N users.
266 |    - Fetches profile pictures CDN urls for the top N users using Puppeteer from twstalker.com or other sources. These sources are twitter webviewers, we do not touch twitter.
267 |    - By default, topN = 200 to avoid overburdening systems
268 |    - Attempts to correct missing user IDs by fetching profile banners and extracting the IDs.
269 |    - Updates the ID-to-username mapping and saves the updated data to `final_weights_with_pics.json`.
270 | 
271 | 4. `dm_final_stats_processing.js`:
272 |    - Reads the direct messaging data from `twitter-archive/data/direct-messages.js`.
273 |    - Processes the data to count messages per month for the past 5 years.
274 |    - Prepares the data for visualizing the DM history graph and saves it to `dm_final_stats_with_chart.json`.
275 | 
276 | 5. `index.html`:
277 |    - Loads data from `final_weights_with_pics.json`.
278 |    - Creates an interactive visualization of the user's Twitter circle using D3.js.
279 |    - Displays the top N users' profile pictures in concentric circles, with the user at the center.
280 |    - Allows adjusting the number of displayed users using a slider.
281 | 
282 | 6. `leaderboard.html`:
283 |    - Loads data from `final_weights_with_pics.json`.
284 |    - Displays a ranking of the user's friends based on the combined weights of mentions and DMs.
285 | 
286 | 7. `dm_stats.html`:
287 |    - Loads data from `dm_final_stats_with_chart.json`.
288 |    - Shows a table of direct messaging statistics per recipient.
289 |    - Clicking on a row in the table opens `chart_draw.html` with the recipient's ID as a URL parameter.
290 | 
291 | 8. `chart_draw.html`:
292 |    - Receives the recipient's ID from the URL parameter.
293 |    - Loads data from `dm_final_stats_with_chart.json`.
294 |    - Finds the data for the specific recipient based on the ID.
295 |    - Displays a bar graph of the monthly message counts for that recipient over the past 5 years using Chart.js.
296 | 
297 | 
298 | 
299 | 
300 | 
301 | 
302 | 
303 | 
304 | ### Solving for username to user id mapping without scraping
305 | 
306 | Just look at the data like Lain. Stare at it.
307 | 
308 | ![Staring at data is essential. It solves a lot of problems. ](static/image.png)
309 | 
310 | ![user_mentions](static/user_example.png)
311 | 
312 | We get free mapping between name and id. It took me sometime to realise this. I had already written the scraper.
313 | 
314 | If you have replied to someone at least once, then you have a valid mapping.
315 | 
316 | 
317 | ### Bugs and Limitations
318 | 
319 | - You may see some `@notfound_userid` in the DM stats table. These are accounts where we couldn't find a mapping between username and id from the reply mentions data. Since there combined weights do not end up in the topN, their pfp and banner is not fetched so they end up as not found.
320 | 
321 | I can add some code to fetch banners (so i can get the userid) for top 200 dm stats also. It will require less than 200 ofc because most people you talk to in DM you have replied to them at least once on the timeline.
322 | 
323 | If you really want to find them, you can try going to <https://twitter.com/intent/user?user_id=user_id> or try <https://twitter.com/i/user/user_id>. You need to be logged in for this.
324 | 
325 | 
326 | ## License
327 | 
328 | This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.


--------------------------------------------------------------------------------
/direct-messaging-stats/chart_draw.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html>
  3 | <head>
  4 |     <title>Messages Frequency Chart</title>
  5 |     <link rel="icon" href="https://pbs.twimg.com/profile_images/1692481211888025600/lUJUEO_p_400x400.jpg" type="image/png">
  6 |     <style>
  7 |         :root {
  8 |             --background-color: #f9e4bc;
  9 |             --text-color: #CF2D01;
 10 |         }
 11 | 
 12 |         body {
 13 |             background-color: var(--background-color);
 14 |             color: var(--text-color);
 15 |             display: flex;
 16 |             justify-content: center; /* Center horizontally */
 17 |              align-items: center; 
 18 |              flex-direction: column;
 19 |         }
 20 | 
 21 |         .custom-section {
 22 |             background-color: var(--background-color);
 23 |             color: var(--text-color);
 24 |             padding: 20px;
 25 |             margin: 10px;
 26 |             border-radius: 5px;
 27 |         }
 28 | 
 29 |         #backButton {
 30 |             position: absolute;
 31 |             top: 90vh;
 32 |             right: 2vw;
 33 |             padding: 0.5vw 1vw;
 34 |             font-size: large;
 35 |             background-color: inherit;
 36 |             color: #CF2D01;
 37 |             font-family: Helvetica, Arial, sans-serif;
 38 |             border: none;
 39 |             border-radius: 5px;
 40 |             cursor: pointer;
 41 |             transition: background-color 0.2s ease-in-out;
 42 |         }
 43 |         #backButton:hover {
 44 |             background-color: #ecb679;
 45 |         }
 46 |         .my-heading-class {
 47 |    
 48 |         font-family: Helvetica, Helvetica, Helvetica;
 49 |         font-size: 24px; /* Example font size */
 50 | 
 51 |           }
 52 | 
 53 |     </style>
 54 |     <script src="https://cdn.jsdelivr.net/npm/chart.js" defer></script>
 55 | </head>
 56 | <body>
 57 |     <button id="backButton">Back</button>
 58 |     <canvas id="messagesChart" width="800" height="400"></canvas>
 59 |     <script>
 60 | 
 61 |         document.getElementById('backButton').addEventListener('click', function() {
 62 |             window.location.href = '../dm_stats.html';
 63 |         });
 64 | 
 65 | 
 66 |         document.addEventListener('DOMContentLoaded', function() {
 67 |         
 68 |             
 69 |         const urlParams = new URLSearchParams(window.location.search);
 70 |         const recipientId = urlParams.get('recipientId'); // Adjust the parameter name as needed
 71 | 
 72 |         if (!recipientId) {
 73 |             console.error('Recipient ID is missing in the URL');
 74 |             return;
 75 |         }
 76 | 
 77 |         // Step 2: Fetch the JSON data
 78 |         fetch('../dm_final_stats_with_chart.json')
 79 |             .then(response => response.json())
 80 |             .then(data => {
 81 |                 // Step 3: Find the specific entry by ID
 82 |                 
 83 |                 const entry = data.find(item => item.recipientUserId === recipientId); // Adjust to match your JSON structure
 84 |                 if (!entry) {
 85 |                     console.error('Entry not found for the given ID');
 86 |                     return;
 87 |                 }
 88 |                 
 89 |                 const heading = document.createElement('h1');
 90 |                 heading.textContent = 'Your DM history with '.concat(entry.recipientUsername) // Set the text content of the heading
 91 |                 heading.id = 'my-heading-id';
 92 |                 heading.className = 'my-heading-class';
 93 |                 document.body.appendChild(heading);
 94 |     
 95 |      
 96 |                 // Step 4: Extract countsPerMonthYear
 97 |                 const countsPerMonthYear = entry.countsPerMonthYear; // Assuming this is the structure
 98 |                 if (!countsPerMonthYear) {
 99 |                     console.error('countsPerMonthYear data is missing for the given entry');
100 |                     return;
101 |                 }
102 | 
103 |                 // Step 5: Use this data to populate your chart
104 |                 const ctx = document.getElementById('messagesChart').getContext('2d');
105 |                 const config = {
106 |                     type: 'bar',
107 |                     data: {
108 |                         labels: Object.keys(countsPerMonthYear),
109 |                         datasets: [{
110 |                             label: 'Messages per Month',
111 |                             backgroundColor: 'rgb(54, 162, 235)',
112 |                             borderColor: 'rgb(54, 162, 235)',
113 |                             data: Object.values(countsPerMonthYear),
114 |                         }]
115 |                     },
116 |                     options: {
117 |                         scales: {
118 |                             y: {
119 |                                 beginAtZero: true
120 |                             }
121 |                         }
122 |                     }
123 |                 };
124 |                 
125 |                 new Chart(ctx, config);
126 |             })
127 |             .catch(error => {
128 |                 console.error('Failed to fetch or process the data', error);
129 |             });
130 |         });
131 | 
132 |     </script>
133 | </body>
134 | </html>
135 | 


--------------------------------------------------------------------------------
/direct-messaging-stats/dm_final_stats_processing.js:
--------------------------------------------------------------------------------
  1 | const fs = require('fs')
  2 | 
  3 | 
  4 | const getPokemonImageUrl = () => {
  5 | 	const baseUrl = 'https://assets.pokemon.com/assets/cms2/img/pokedex/full/'
  6 | 	const pokemonNumber = Math.floor(Math.random() * 1000)
  7 | 	const paddedNumber = pokemonNumber.toString().padStart(3, '0')
  8 | 	return  `${baseUrl}${paddedNumber}.png`
  9 | }
 10 | 
 11 | 
 12 | // thanks chatgpt
 13 | function generateMonthYears() {
 14 | 	let monthYears = []
 15 | 	const endDate = new Date() // Current date
 16 | 	const startDate = new Date(new Date().setFullYear(endDate.getFullYear() - 5)) // 5 years before
 17 | 
 18 | 	let currentYear = endDate.getFullYear()
 19 | 	let currentMonth = endDate.getMonth() + 1 // JS months are 0-indexed, add 1 for human-readable format
 20 | 
 21 | 	while (currentYear > startDate.getFullYear() || (currentYear === startDate.getFullYear() && currentMonth >= startDate.getMonth() + 1)) {
 22 | 		// Prepend to keep the list in descending order from the current month-year
 23 | 		monthYears.unshift(`${currentMonth}-${currentYear}`)
 24 | 
 25 | 		// Move to the previous month
 26 | 		if (currentMonth === 1) {
 27 | 			currentMonth = 12 // Wrap around to December of the previous year
 28 | 			currentYear-- // Decrement the year
 29 | 		} else {
 30 | 			currentMonth-- // Just go to the previous month
 31 | 		}
 32 | 	}
 33 | 
 34 | 	return monthYears
 35 | }
 36 | 
 37 | 
 38 | const allMonthYears = generateMonthYears()
 39 | 
 40 | // Function to process conversations and populate message counts
 41 | function processConversations(allData, recipientUserId, recipientUsername, imageSrc, lastMessage, lastMessageDate, totalMsgCount, messagesSent, messagesReceived) {
 42 | 	// Initialize an object to hold message counts per month-year
 43 | 
 44 |     
 45 | 
 46 | 	const countsPerMonthYear = allMonthYears.reduce((acc, monthYear) => {
 47 | 		acc[monthYear] = 0 // Initialize all months with 0 messages
 48 | 		return acc
 49 | 	}, {})
 50 | 
 51 | 	// Filter conversations to include only those with specificId in conversationId
 52 | 	// const filteredConversations = conversations.filter(conv => conv.conversationId.includes(specificId))
 53 | 
 54 | 
 55 | 	const filteredConversations = allData.filter(conv => {
 56 | 		// Debugging: Log the structure of a conversation object
 57 | 		
 58 | 		// Adjust the property access according to the actual structure
 59 | 		// For example, if conversationId is directly accessible and a string
 60 | 		return conv.dmConversation && conv.dmConversation.conversationId && typeof conv.dmConversation.conversationId === 'string' && conv.dmConversation.conversationId.includes(recipientUserId)
 61 | 		// If the structure is different, adjust the above condition accordingly
 62 | 	})
 63 |     
 64 | 
 65 | 	// Populate the message counts for each filtered conversation
 66 | 	filteredConversations.forEach(conversation => {
 67 | 		conversation.dmConversation.messages.forEach(msg => {
 68 | 			const date = new Date(msg.messageCreate?.createdAt)
 69 | 			const monthYear = `${date.getMonth() + 1}-${date.getFullYear()}`
 70 | 
 71 | 			if (countsPerMonthYear.hasOwnProperty(monthYear)) {
 72 | 				countsPerMonthYear[monthYear]++
 73 | 			}
 74 | 		})
 75 | 	})
 76 | 
 77 | 	return {
 78 | 		recipientUserId,
 79 | 		recipientUsername,
 80 | 		countsPerMonthYear,
 81 | 		imageSrc,
 82 | 		lastMessage,
 83 | 		lastMessageDate,
 84 | 		totalMsgCount,
 85 | 		messagesSent,
 86 | 		messagesReceived
 87 | 	}
 88 | }
 89 | 
 90 | 
 91 | const directMessagesDataRaw = fs.readFileSync('twitter-archive/data/direct-messages.js', 'utf8')
 92 | const directMessagesData = JSON.parse(directMessagesDataRaw.replace('window.YTD.direct_messages.part0 = ', ''))
 93 | 
 94 | 
 95 | const user_mentions_dict = fs.readFileSync('user_mentions_screen_name_mapping.json', 'utf8')
 96 | const userMentionsDict = JSON.parse(user_mentions_dict)
 97 | 		
 98 | 
 99 | const updatedScreenNameToId = userMentionsDict.screenNameToId
100 | const updatedIdToScreenName = userMentionsDict.idToScreenName
101 | 
102 | // Iterate through dmStats and process each conversation
103 | const dmStats = JSON.parse(fs.readFileSync('dm_sorted_by_message_count_and_last_message.json', 'utf8'))
104 | 
105 | 
106 | const results = dmStats.map(conv => {
107 | 	const recipientId = conv.recipientId // Assuming dmStats has a recipientId field
108 | 	const lastMessage = conv.lastMessage.text
109 | 	const lastMessageDate = new Date(conv.lastMessage.createdAt)
110 | 	const twitterUsername = updatedIdToScreenName[recipientId]?.twitterUsername
111 | 	let imageSrc = updatedIdToScreenName[recipientId]?.imageSrc
112 | 	const totalMsgCount = conv.totalMessages
113 | 	const messagesSent = conv.messagesSent
114 | 	const messagesReceived = conv.messagesReceived
115 | 
116 | 	let recipientUsername = conv.recipientUsername ? conv.recipientUsername : twitterUsername
117 | 
118 | 	if (!imageSrc && recipientUsername) {
119 | 		imageSrc = updatedScreenNameToId[recipientUsername]?.imageSrc
120 | 		
121 | 	}
122 | 
123 | 	if (!recipientUsername) {
124 | 		recipientUsername = 'not_found'.concat(recipientId)
125 | 	}
126 | 
127 | 	if (!imageSrc) {
128 | 		imageSrc = getPokemonImageUrl()
129 | 	}
130 | 
131 | 	return processConversations(directMessagesData, recipientId, recipientUsername, imageSrc, lastMessage, lastMessageDate, totalMsgCount, messagesSent, messagesReceived)
132 | })
133 | 
134 | fs.writeFileSync('dm_final_stats_with_chart.json', JSON.stringify(results, null, 2))
135 | 


--------------------------------------------------------------------------------
/direct-messaging-stats/dm_single_id_check.js:
--------------------------------------------------------------------------------
 1 | const fs = require('fs')
 2 | 
 3 | 
 4 | 
 5 | const startYear = new Date().getFullYear() - 4 // Assuming the same 5-year range as before
 6 | 
 7 | // Function to generate month-years, same as before
 8 | function generateMonthYears(startYear) {
 9 | 	let monthYears = []
10 | 	for (let year = startYear; year < startYear + 5; year++) {
11 | 		for (let month = 1; month <= 12; month++) {
12 | 			monthYears.push(`${month}-${year}`)
13 | 		}
14 | 	}
15 | 	return monthYears
16 | }
17 | 
18 | // Generate month-year labels for the entire 5-year period
19 | const allMonthYears = generateMonthYears(startYear)
20 | 
21 | // Function to process conversations and populate message counts
22 | function processConversations(allData) {
23 | 	// Initialize an object to hold message counts per month-year
24 | 	const countsPerMonthYear = allMonthYears.reduce((acc, monthYear) => {
25 | 		acc[monthYear] = 0 // Initialize all months with 0 messages
26 | 		return acc
27 | 	}, {})
28 | 
29 | 	// Filter conversations to include only those with specificId in conversationId
30 | 	// const filteredConversations = conversations.filter(conv => conv.conversationId.includes(specificId))
31 | 
32 | 
33 | 	const filteredConversations = allData.filter(conv => {
34 | 		// Debugging: Log the structure of a conversation object
35 | 		console.log('here', conv)
36 | 		console.log('end')
37 | 		// Adjust the property access according to the actual structure
38 | 		// For example, if conversationId is directly accessible and a string
39 | 		return conv.dmConversation && conv.dmConversation.conversationId && typeof conv.dmConversation.conversationId === 'string' && conv.dmConversation.conversationId.includes(specificId)
40 | 		// If the structure is different, adjust the above condition accordingly
41 | 	})
42 |     
43 | 	console.log(filteredConversations)
44 | 
45 | 	// Populate the message counts for each filtered conversation
46 | 	filteredConversations.forEach(conversation => {
47 | 		conversation.dmConversation.messages.forEach(msg => {
48 | 			const date = new Date(msg.messageCreate.createdAt)
49 | 			const monthYear = `${date.getMonth() + 1}-${date.getFullYear()}`
50 | 
51 | 			if (countsPerMonthYear.hasOwnProperty(monthYear)) {
52 | 				countsPerMonthYear[monthYear]++
53 | 			}
54 | 		})
55 | 	})
56 | 
57 | 	return countsPerMonthYear
58 | }
59 | 
60 | 
61 | const allData = JSON.parse(fs.readFileSync('twitter-archive/data/direct-messages.js', 'utf8').replace('window.YTD.direct_messages.part0 = ', ''))
62 | 
63 | // Assuming allData is an array of conversation objects
64 | const countsPerMonthYear = processConversations(allData)
65 | 
66 | fs.writeFileSync('dm_counts.json', JSON.stringify(countsPerMonthYear, null, 2))
67 | 
68 | const specificId = '1606638641857630211' // Example ID you are looking for in conversationIds


--------------------------------------------------------------------------------
/dm_stats.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |     <meta charset="UTF-8">
  5 |     <meta name="viewport" content="width=device-width, initial-scale=1.0">
  6 |     <title>DM Stats</title>
  7 |     <link rel="icon" href="https://pbs.twimg.com/profile_images/1692481211888025600/lUJUEO_p_400x400.jpg" type="image/png">
  8 |     <style>
  9 |         body {
 10 |             font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
 11 |             margin: 0;
 12 |             padding: 20px;
 13 |             background-color: #f9e4bc;
 14 |             color: #CF2D01;
 15 |             display: flex;
 16 |             flex-direction: column;
 17 |             align-items: center;
 18 |         }
 19 |         h1 {
 20 |             text-align: center;
 21 |             font-size: 2.5rem;
 22 |             margin-bottom: 1rem;
 23 |         }
 24 |         #dmStats {
 25 |             display: flex;
 26 |             flex-wrap: wrap;
 27 |             justify-content: center;
 28 |             max-width: 1200px;
 29 |         }
 30 |         .conversation-wrapper {
 31 |             width: 50vw;
 32 |             margin: 10px;
 33 |         }
 34 |         .conversation {
 35 |             background-color: #f9e4bc;
 36 |             border: 1px solid #CF2D01;
 37 |             padding: 25px;
 38 |             margin: 5px;
 39 |             display: flex;
 40 |             align-items: center;
 41 |             border-radius: 10px;
 42 |             cursor: pointer;
 43 |             transition: transform 0.2s, box-shadow 0.2s;
 44 |             box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
 45 |         }
 46 |         .conversation:hover {
 47 |             transform: scale(1.02);
 48 |             box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
 49 |         }
 50 |         .conversation img {
 51 |             border-radius: 50%;
 52 |             margin-right: 10px;
 53 |         }
 54 |         .username {
 55 |             font-weight:inherit;
 56 |             font-size: 1.1rem;
 57 |         }
 58 |         .messageCount {
 59 |             
 60 |             margin-left: auto;
 61 |             font-size: 0.8rem;
 62 |             color: #666;
 63 |         }
 64 |         .lastMessage {
 65 |             font-size: 0.9em;
 66 |             margin: 5px 0;
 67 |             color: #CF2D01;
 68 |             font-weight: inherit;
 69 |             /* padding: 2px 5px; */
 70 |             border-radius: 5px;
 71 |             word-wrap: break-word;
 72 |         }
 73 | 
 74 |         #backButton {
 75 |             position: absolute;
 76 |             top: 3.5vh;
 77 |             right: 2vw;
 78 |             padding: 0.5vw 1vw;
 79 |             font-size: large;
 80 |             background-color: inherit;
 81 |             color: #CF2D01;
 82 |             font-family: Helvetica, Arial, sans-serif;
 83 |             border: none;
 84 |             border-radius: 5px;
 85 |             cursor: pointer;
 86 |             transition: background-color 0.2s ease-in-out;
 87 |         }
 88 |         #backButton:hover {
 89 |             background-color: #ecb679;
 90 |         }
 91 | 
 92 |         .convo-container {
 93 |         display: flex;
 94 |         align-items: center;
 95 |         justify-content: space-between;
 96 |         width: 100%;
 97 |         gap: 20px;
 98 |         font-weight: 600;
 99 |         }
100 | 
101 |         .convo-details {
102 |             display: flex;
103 |             flex-direction: column;
104 |             font-size: 1em;
105 |         }
106 | 
107 |         .username, .lastMessage, .messageCount {
108 |             margin: 2px 0;
109 |         }
110 | 
111 |         .messageCount {
112 |             font-size: 0.9em; /* Smaller text for less emphasis */
113 |         }
114 | 
115 | 
116 |         /* experimental */
117 |         .conversation:hover::after {
118 |         content: 'view conversation history graph';
119 |         position: absolute;
120 |         bottom: -2em;
121 |         left: 50%;
122 |         transform: translateX(-50%);
123 |         background-color: #ecb679; /* Soft Light Grey */
124 |         color: #a65336; /* Warm Deep Orange */
125 |         padding: 5px;
126 |         border-radius: 5px;
127 |         font-size: 0.8em;
128 |         white-space: nowrap;
129 |         border: 1px solid #d9a993; /* Soft Orange for the border */
130 |         }
131 | 
132 |         .ranking {
133 |         margin-left: auto; /* Pushes the ranking to the right */
134 |         padding-right: 10px; /* Optional padding for aesthetic spacing */
135 |         font-weight: bold; /* Optional styling to make the ranking stand out */
136 |         }
137 | 
138 |         @media (max-width: 768px) {
139 |         .conversation-wrapper {
140 |             width: 100%;
141 |         }
142 |         }
143 |         
144 |         
145 |     </style>
146 | </head>
147 | <body>
148 |     <button id="backButton">Back</button>
149 |     <h1>DM Stats</h1>
150 |     <div id="dmStats"></div>
151 |     
152 |     <script>
153 |         document.getElementById('backButton').addEventListener('click', function() {
154 |             window.location.href = 'index.html';
155 |         });
156 | 
157 |         document.addEventListener('DOMContentLoaded', function() {
158 |             fetch('dm_final_stats_with_chart.json')
159 |                 .then(response => response.json())
160 |                 .then(data => {
161 |                     createDMStats(data);
162 |                 })
163 |                 .catch(error => console.error('Error loading the data:', error));
164 |         });
165 | 
166 |         function createDMStats(conversations) {
167 |             const dmStats = document.getElementById('dmStats');
168 |             conversations.forEach((convo, index) => {
169 |                 const convoWrapper = document.createElement('div');
170 |                 convoWrapper.className = 'conversation-wrapper';
171 |                 
172 |                 const convoElement = document.createElement('div');
173 |                 convoElement.className = 'conversation';
174 |                 const date = convo.lastMessageDate
175 | 
176 | 
177 | 
178 |                 convoElement.innerHTML = `
179 |                     <div class="convo-container">
180 |                         <img src="${convo.imageSrc}" alt="User Image" width="60" height="60">
181 |                         <div class="convo-details">
182 |                             <div class="username">@${convo.recipientUsername || 'Unknown'}</div>
183 |                             <div class="lastMessage">${date.slice(0, 10)}: ${convo.lastMessage}</div>
184 |                             <div class="messageCount">
185 |                                 Total: ${convo.totalMsgCount} 
186 |                                 Sent: ${convo.messagesSent} 
187 |                                 ${convo.messagesReceived === 0 ? `Received: 0 <span style="color: red;">(Account deleted)</span>` : `Received: ${convo.messagesReceived}`}
188 |                             </div>
189 |                         </div>
190 |                         <div class="ranking">#${index + 1}</div> <!-- Displaying the ranking here -->
191 |                     </div>
192 |                 `;
193 | 
194 |                 // convoElement.onclick = function() {
195 |                 //     window.open(`https://twitter.com/${convo.recipientUsername}`, '_blank');
196 |                 // };
197 | 
198 |                 convoElement.onclick = function() {
199 |                     window.location.href = `direct-messaging-stats/chart_draw.html?recipientId=${convo.recipientUserId}`; // Append the ID as a URL parameter
200 |                 };
201 | 
202 |                 
203 |                 convoWrapper.appendChild(convoElement);
204 |                 dmStats.appendChild(convoWrapper);
205 |             });
206 |         }
207 |     </script>
208 | </body>
209 | </html>


--------------------------------------------------------------------------------
/experiments_backups/compute_mentions.js:
--------------------------------------------------------------------------------
  1 | const fs = require('fs');
  2 | const path = require('path');
  3 | 
  4 | function extractTwitterData(tweet_data) {
  5 |     return tweet_data.map(data => {
  6 |       // Extract user mentions
  7 |       data = data.tweet
  8 |       timestamp = data.created_at
  9 |       url_id = data.id_str
 10 |      
 11 | 
 12 |       let userMentions = [];
 13 |       let validUrls = [];
 14 |   
 15 |       // Check if user_mentions exists before accessing it
 16 |       if (data.entities && data.entities.user_mentions) {
 17 |         console.log("YES")
 18 |         userMentions = data.entities.user_mentions.map(mention => ({
 19 |           name: mention.name,
 20 |           screen_name: mention.screen_name,
 21 |           id: mention.id,
 22 |           id_str: mention.id_str
 23 |         }));
 24 |       }
 25 |   
 26 |       // Check if urls exist and match the criteria before accessing
 27 |       if (data.entities && data.entities.urls) {
 28 |         validUrls = data.entities.urls.filter(url => 
 29 |           url.expanded_url.match(/^https:\/\/twitter\.com\/\w+\/status\/\d+/)
 30 |         ).map(url => ({
 31 |           expanded_url: url.expanded_url
 32 |         }));
 33 |       }
 34 |   
 35 |       return {
 36 |         timestamp,
 37 |         url_id,
 38 |         userMentions,
 39 |         validUrls
 40 |       };
 41 |     });
 42 |   }
 43 | 
 44 | // pending, just testing some shit
 45 | function aggregateMentions(data) {
 46 | const mentionsCount = {};
 47 | 
 48 | data.forEach(tweet => {
 49 |     tweet.userMentions.forEach(mention => {
 50 |     const { screen_name } = mention;
 51 |     if (mentionsCount[screen_name]) {
 52 |         mentionsCount[screen_name]++;
 53 |     } else {
 54 |         mentionsCount[screen_name] = 1;
 55 |     }
 56 |     });
 57 | });
 58 | 
 59 | return mentionsCount;
 60 | }
 61 | 
 62 | 
 63 | 
 64 | // Adjust the path to the location of your file
 65 | const filePath = path.join(__dirname, 'twitter-archive/data/tweets.js');
 66 | 
 67 | fs.readFile(filePath, 'utf8', (err, data) => {
 68 |   if (err) {
 69 |     console.error('Error reading file:', err);
 70 |     return;
 71 |   }
 72 | 
 73 |   // Attempt to isolate the JSON part and parse it
 74 |   try {
 75 |     const jsonPart = data.substring(data.indexOf('=') + 1).trim();
 76 |     const tweets = JSON.parse(jsonPart);
 77 |     console.log('Tweets loaded:', tweets.length);
 78 |     const extractedData = extractTwitterData(tweets); // assuming 'tweets' is your loaded data
 79 |  
 80 |     const filteredData = extractedData.filter(item => item.userMentions.length > 0 || item.validUrls.length > 0);
 81 |     console.log(JSON.stringify(filteredData, null, 2));
 82 |     const mentionsCount = aggregateMentions(filteredData);
 83 | 
 84 |     const sortedMentionsArray = Object.entries(mentionsCount).sort((a, b) => b[1] - a[1]);
 85 |     const sortedMentionsObject = Object.fromEntries(sortedMentionsArray);
 86 |     fs.writeFile('mentionsCount.json', JSON.stringify(sortedMentionsObject, null, 2), 'utf8', (err) => {
 87 |         if (err) {
 88 |           console.error('Error writing file:', err);
 89 |         } else {
 90 |           console.log('Data saved successfully.');
 91 |         }
 92 |       });
 93 | 
 94 | 
 95 |   } catch (parseErr) {
 96 |     console.error('Error parsing JSON:', parseErr);
 97 |   }
 98 | });
 99 | 
100 | 
101 | 


--------------------------------------------------------------------------------
/experiments_backups/extract_mentions_and_dump_backup.js:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/sankalp1999/twitter-circle/30fc2533f844d1450db377e9391544b901469865/experiments_backups/extract_mentions_and_dump_backup.js


--------------------------------------------------------------------------------
/experiments_backups/index_backupv1.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 | <meta charset="UTF-8">
  5 | <title>Twitter Circle Visualization</title>
  6 | <script src="https://d3js.org/d3.v6.min.js"></script>
  7 | <style>
  8 |   body {
  9 |     margin: 0;
 10 |     background-color: lightpink; /* Light pink background */
 11 |     display: flex;
 12 |     justify-content: center;
 13 |     align-items: center;
 14 |     height: 100vh;
 15 |   }
 16 |   svg {
 17 |     border: 1px solid #ccc; /* Light frame around the SVG */
 18 |   }
 19 | </style>
 20 | </head>
 21 | <body>
 22 | <svg id="network" width="1600" height="1600"></svg>
 23 | <script>
 24 | // Load the data from the JSON file
 25 | 
 26 | 
 27 |     d3.json('pfp_dict.json').then(function(data) {
 28 |         const svg = d3.select('#network'),
 29 |     width = +svg.attr("width"),
 30 |     height = +svg.attr("height"),
 31 |     nodeRadius = 40, // Radius for the profile images
 32 |     spacingBetweenNodes = 10, // Spacing between nodes
 33 |     spacingBetweenCircles = 40; // Spacing between concentric circles
 34 | 
 35 | 
 36 | 
 37 |     const center = { x: width / 2, y: height / 2 };
 38 | 
 39 | 
 40 | 
 41 |     // Function to calculate positions
 42 |     function calculatePositions(data, startRadius) {
 43 |         let currentRadius = startRadius,
 44 |             currentAngle = 0,
 45 |             positions = [];
 46 | 
 47 |         data.forEach((d, i) => {
 48 |             if (d.imageSrc === null) {
 49 |                 return; // works like continue because for each is a function
 50 |             }
 51 |             
 52 |             if (currentAngle >= 2 * Math.PI) {
 53 |                 currentAngle = 0; // Reset angle
 54 |                 currentRadius += nodeRadius * 2 + spacingBetweenNodes + spacingBetweenCircles; // Increase radius for next circle
 55 |             }
 56 |             const x = center.x + Math.cos(currentAngle) * currentRadius;
 57 |             const y = center.y + Math.sin(currentAngle) * currentRadius;
 58 |             positions.push({ twitterUsername: d.twitterUsername, imageSrc: d.imageSrc, x, y });
 59 |             const circumference = 2 * Math.PI * currentRadius;
 60 |             const nodesInThisCircle = Math.floor(circumference / (nodeRadius * 2 + spacingBetweenNodes));
 61 |             currentAngle += 2 * Math.PI / nodesInThisCircle;
 62 |         });
 63 | 
 64 |         return positions;
 65 |     }
 66 | 
 67 |     // Call calculatePositions with your data and desired starting radius for the first circle
 68 |     const nodePositions = calculatePositions(data, 0);
 69 | 
 70 |     // Draw the nodes
 71 |     nodePositions.forEach(function(d) {
 72 | 
 73 |         const foreignObject = svg.append('foreignObject')
 74 |         .attr('x', d.x - nodeRadius)
 75 |         .attr('y', d.y - nodeRadius)
 76 |         .attr('width', nodeRadius * 2)
 77 |         .attr('height', nodeRadius * 2);
 78 | 
 79 |         // Append an HTML div to the foreignObject
 80 |         const div = foreignObject.append('xhtml:div')
 81 |         .style('width', `${nodeRadius * 2}px`)
 82 |         .style('height', `${nodeRadius * 2}px`)
 83 |         .style('border-radius', '50%') // Make the div circular
 84 |         .style('overflow', 'hidden');     
 85 |         
 86 |         div.append('xhtml:img')
 87 |         .attr('src', d.imageSrc)
 88 |         .style('width', '100%')
 89 |         .style('height', '100%')
 90 |         .on('click', () => window.open(`https://twitter.com/${d.twitterUsername}`, '_blank')); 
 91 | 
 92 |         // svg.append('image')
 93 |         //    .attr('xlink:href', d.imageSrc)
 94 |         //    .attr('x', d.x - nodeRadius)
 95 |         //    .attr('y', d.y - nodeRadius)
 96 |         //    .attr('width', nodeRadius * 2)
 97 |         //    .attr('height', nodeRadius * 2)
 98 |         //    .attr('clip-path', 'url(#circle-clip)')
 99 |         //    .on('click', () => window.open(`https://twitter.com/${d.twitterUsername}`, '_blank')); // Open Twitter profile on click
100 |     });
101 | });
102 | </script>
103 | </body>
104 | </html>
105 | 


--------------------------------------------------------------------------------
/experiments_backups/index_html_proper_centering_backup_latest.js:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 | <meta charset="UTF-8">
  5 | <title>Twitter Circle Visualization</title>
  6 | <script src="https://d3js.org/d3.v6.min.js"></script>
  7 | <style>
  8 |   body {
  9 |   display: flex;
 10 |   flex-direction: column; /* Stack elements vertically */
 11 |   align-items: center;
 12 |   justify-content: start; /* Align content to the top */
 13 |   height: 100vh;
 14 |   margin: 0;
 15 |   background-color: #f9e4bc; /* Cream background */
 16 | }
 17 |   
 18 |   .node-foreign-object {
 19 |   transition: transform 0.2s; /* Smooth transition for any transforms */
 20 |   transform-origin: 50% 50%; /* Center the scaling transformation */
 21 |   transform-box: fill-box; /* Refer to the object's bounding box for the origin */
 22 |   border-radius: 50%; /* Keeps the circular shape */
 23 |   overflow: hidden; /* Ensures the content does not spill out on scale */
 24 | }
 25 | 
 26 | .node-foreign-object:hover {
 27 |   transform: scale(1.4); /* Enlarges the foreignObject on hover */
 28 |   cursor: pointer;
 29 | }
 30 | 
 31 | .node-img {
 32 |   width: 100%;
 33 |   height: 100%;
 34 |   object-fit: cover; /* Cover the area without stretching */
 35 |   border-radius: 50%; /* Ensures the image is circular */
 36 | }
 37 | 
 38 | label {
 39 |     display: block; /* Ensure the label is on its own line */
 40 |     margin-bottom: 10px; /* Space between the label and the slider */
 41 |     font-size: 30px; /* Larger font size for readability */
 42 | }
 43 | 
 44 | #slider-container {
 45 |   margin-top: 20px;
 46 |   text-align: center; /* Center-align the slider text and slider */
 47 |   padding: 10px;
 48 |   border-radius: 8px; /* Rounded corners for the container */
 49 | }
 50 | 
 51 | svg#network {
 52 |   max-width: 95%; /* Limit SVG size for very large screens */
 53 |   height: 95%; /* Adjust height automatically */
 54 |   margin-top: 20px; /* Add space between the slider and the SVG */
 55 | }
 56 | 
 57 | 
 58 | 
 59 | #pfpCountSlider {
 60 |     width: 250px; /* Larger width for the slider */
 61 |     -webkit-appearance: none; /* Override default appearance for WebKit browsers */
 62 |     appearance: none;
 63 |     height: 20px; /* Increase the height for a bigger touch area */
 64 |     background: #ffc0cb; /* Background color of the slider */
 65 |     outline: none; /* Remove the outline to avoid a boxy look when selected */
 66 |     opacity: 0.7; /* Slightly transparent */
 67 |     transition: opacity 0.2s; /* Smooth transition for hover effect */
 68 | }
 69 | #pfpCountSlider::-webkit-slider-thumb {
 70 |     -webkit-appearance: none;
 71 |     appearance: none;
 72 |     width: 25px; /* Wider thumb for easier grabbing */
 73 |     height: 25px; /* Taller thumb for easier grabbing */
 74 |     background: hsl(196, 84%, 46%); /* Green color for the thumb */
 75 |     cursor: pointer; /* Indicates the thumb is draggable */
 76 |     border-radius: 50%; /* Circular thumb */
 77 | }
 78 | 
 79 | #pfpCountSlider::-moz-range-thumb {
 80 |     width: 25px;
 81 |     height: 25px;
 82 |     background: #4CAF50;
 83 |     cursor: pointer;
 84 |     border-radius: 50%;
 85 | }
 86 | 
 87 | @media (max-width: 768px) { /* Adjustments for tablets and mobile phones */
 88 |   #slider-container {
 89 |     width: 90%; /* Make the slider container take more space */
 90 |   }
 91 | 
 92 |   #pfpCountSlider {
 93 |     width: 100%; /* Make the slider adapt to the container width */
 94 |   }
 95 | 
 96 |   svg#network {
 97 |     max-width: 100%; /* Allow the SVG to fill the container on smaller screens */
 98 |   }
 99 | }
100 | 
101 | 
102 | 
103 | </style>
104 | </head>
105 | <body>
106 |     
107 |     <div id="slider-container">
108 |         <label for="pfpCountSlider">Number of Profiles: <span id="pfpCount">100</span></label>
109 |         <input type="range" id="pfpCountSlider" min="1" max="100" value="100" step="1">
110 |     </div>
111 |     
112 |     
113 | <svg id="network" width="2000" height="2000"></svg>
114 | <script>
115 | // Load the data from the JSON file
116 | 
117 | 
118 | 
119 | 
120 |     let center = { x: 0, y: 0 };
121 | 
122 |     function updateCenter() {
123 |         const svg = d3.select('#network').node();
124 |         const width = svg.clientWidth || svg.parentNode.clientWidth;
125 |         const height = svg.clientHeight || svg.parentNode.clientHeight;
126 |         center.x = width / 2;
127 |         center.y = height / 2;
128 |     }
129 | 
130 | 
131 |     d3.json('pfp_dict.json').then(function(data) {
132 |         updateCenter();
133 |     const maxProfiles = data.length;
134 |     document.getElementById('pfpCountSlider').max = maxProfiles;
135 |     document.getElementById('pfpCountSlider').value = maxProfiles;
136 |     document.getElementById('pfpCount').textContent = 'All'; // Default to all
137 | 
138 |     const svg = d3.select('#network'),
139 |     width = +svg.attr("width"),
140 |     height = +svg.attr("height"),
141 |     nodeRadius = 30, // Radius for the profile images
142 |     spacingBetweenNodes = 2, // Spacing between nodes
143 |     spacingBetweenCircles = 20; // Spacing between concentric circles
144 | 
145 | 
146 |     // Function to calculate positions
147 |     function calculatePositions(data, startRadius) {
148 |     let currentRadius = startRadius, // Adjust initial radius to start from outside the center node
149 |         currentAngle = 0,
150 |         positions = [],
151 |         nodesInThisCircle,
152 |         circumference;
153 | 
154 |     // Place the center node
155 |     if (data.length > 0 && data[0].imageSrc !== null) {
156 |         positions.push({ twitterUsername: data[0].twitterUsername, imageSrc: data[0].imageSrc, x: center.x, y: center.y });
157 |     }
158 | 
159 |     // Start from the second item if the first one is used for the center node
160 |     data.slice(1).forEach((d, i) => {
161 |         if (d.imageSrc === null) {
162 |             return; // Skip this iteration if imageSrc is null
163 |         }
164 | 
165 |         circumference = 2 * Math.PI * (currentRadius);
166 |         nodesInThisCircle = Math.floor(circumference / (nodeRadius * 2 + spacingBetweenNodes));
167 | 
168 |         if (currentAngle >= 2 * Math.PI) {
169 |             currentRadius += (nodeRadius * 2) + spacingBetweenCircles; // Adjust for next circle
170 |             currentAngle = 0; // Reset angle for next circle
171 |         }
172 | 
173 |         const x = center.x + Math.cos(currentAngle) * currentRadius;
174 |         const y = center.y + Math.sin(currentAngle) * currentRadius;
175 |         positions.push({ twitterUsername: d.twitterUsername, imageSrc: d.imageSrc, x, y });
176 | 
177 |         // Update for next node
178 |         currentAngle += (2 * Math.PI) / nodesInThisCircle;
179 |     });
180 | 
181 |     return positions;
182 | }
183 | 
184 | function drawNodes(filteredData) {
185 |         // Clear existing SVG content
186 |         svg.selectAll("*").remove();
187 | 
188 |         const nodePositions = calculatePositions(filteredData, nodeRadius * 2 + spacingBetweenCircles);
189 |         const simulation = d3.forceSimulation(nodePositions)
190 |             .force("center", d3.forceCenter(center.x, center.y))
191 |             .force("collide", d3.forceCollide().radius(d => nodeRadius * 1.5).strength(0.7));
192 | 
193 |         // Run the simulation for a few iterations
194 |         for (let i = 0; i < 10; ++i) simulation.tick();
195 | 
196 |         // Draw the nodes
197 |         nodePositions.forEach(function(d) {
198 |             const foreignObject = svg.append('foreignObject')
199 |                 .attr('class', 'node-foreign-object')
200 |                 .attr('x', d.x - nodeRadius)
201 |                 .attr('y', d.y - nodeRadius)
202 |                 .attr('width', nodeRadius * 2)
203 |                 .attr('height', nodeRadius * 2);
204 | 
205 |             const div = foreignObject.append('xhtml:div')
206 |                 .style('width', `${nodeRadius * 2}px`)
207 |                 .style('height', `${nodeRadius * 2}px`)
208 |                 .style('border-radius', '50%')
209 |                 .style('overflow', 'hidden');
210 | 
211 |             div.append('xhtml:img')
212 |                 .attr('class', 'node-img')
213 |                 .attr('src', d.imageSrc)
214 |                 .style('width', '100%')
215 |                 .style('height', '100%')
216 |                 .on('click', () => window.open(`https://twitter.com/${d.twitterUsername}`, '_blank'));
217 |         });
218 |     }
219 | 
220 | 
221 |     drawNodes(data);
222 | 
223 |     document.getElementById('pfpCountSlider').addEventListener('input', function() {
224 |         updateCenter();
225 |         const value = this.value;
226 |         const filteredData = data.slice(0, value);
227 |         document.getElementById('pfpCount').textContent = value; // Update the displayed count
228 | 
229 |         drawNodes(filteredData); // Redraw with the filtered data
230 |     });
231 | 
232 |     window.addEventListener('resize', function() {
233 |         updateCenter();
234 |         // You may need to call a function to redraw your visualization here
235 |         // For example:
236 |         const value = document.getElementById('pfpCountSlider').value
237 |         const filteredData = data.slice(0, value);
238 |         drawNodes(filteredData); // Assuming 'data' is accessible, or you need to manage its scope
239 |     });
240 |     
241 | });
242 | </script>
243 | </body>
244 | </html>
245 | 


--------------------------------------------------------------------------------
/experiments_backups/twitterpfpfetcher.js:
--------------------------------------------------------------------------------
 1 | const puppeteer = require('puppeteer');
 2 | 
 3 | const getAvatar = async (twitterUsername) => {
 4 |   const browser = await puppeteer.launch({args: ['--no-sandbox', '--disable-setuid-sandbox']});
 5 |   const page = await browser.newPage();
 6 |   await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36');
 7 |   try {
 8 |   await page.goto(`https://twitter.com/${twitterUsername}/photo`);
 9 |   await page.waitForSelector('img[alt="Image"][draggable="true"]', { timeout: 10000 });
10 |   const imageSrc = await page.evaluate(() => {
11 |     const image = document.querySelector('img[alt="Image"][draggable="true"]');
12 |     return image ? image.src : null;
13 |   });
14 | 
15 |   if (imageSrc) {
16 |     console.log(`${twitterUsername}: ${imageSrc}`);
17 |   } else {
18 |     console.log(`${twitterUsername}: Profile image URL not found.`);
19 |   }
20 |   
21 | } catch (error) {
22 |   console.error(`Failed to retrieve profile image for ${twitterUsername}: ${error.message}`);
23 | } finally {
24 |   await page.close();
25 |   await browser.close();
26 | }
27 | };
28 | 
29 | const pfp_list = ['dejavucoder', 'sama', 'elonmusk', 'p_nawrot']
30 | pfp_list.map( item => {
31 |     getAvatar(item)
32 | })
33 | 
34 | 


--------------------------------------------------------------------------------
/experiments_backups/user_name_to_user_id.js:
--------------------------------------------------------------------------------
 1 | const fs = require('fs')
 2 | const puppeteer = require('puppeteer')
 3 | 
 4 | const fetchTwitterUserId = async (twitterUsername, browser) => {
 5 | 	let attempts = 2 // Number of attempts: initial + 1 retry
 6 | 	twitterUsername = twitterUsername.twitterUsername
 7 | 	for (let i = 0; i < attempts; i++) {
 8 | 		const page = await browser.newPage()
 9 | 		await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36')
10 | 		
11 | 		await page.setRequestInterception(true)
12 | 		page.on('request', (req) => {
13 | 			if (['stylesheet', 'image', 'font'].includes(req.resourceType())) {
14 | 				req.abort()
15 | 			} else {
16 | 				req.continue()
17 | 			}
18 | 		})
19 | 		try {
20 | 			await page.goto(`https://twitter.com/${twitterUsername}`, { waitUntil: 'networkidle0', timeout: 0 }) // Increase timeout
21 | 			await page.waitForSelector('script[type="application/ld+json"]', { timeout: 3000 }) // Wait for the specific script tag, up to 10 seconds
22 | 			const userId = await page.evaluate(() => {
23 | 				const scriptContent = document.evaluate('//script[@type="application/ld+json"]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.textContent
24 | 				const json = JSON.parse(scriptContent)
25 | 				return json.author ? json.author.identifier : null
26 | 			})
27 | 
28 | 			console.log(`${twitterUsername}: ${userId}`)
29 | 			await page.close()
30 | 			return { twitterUsername: twitterUsername, userId }
31 | 		} catch (error) {
32 | 			console.error(`Attempt ${i + 1} failed for ${twitterUsername}: ${error.message}`)
33 | 			await page.close() // Close the page even if an error occurs
34 | 			if (i === attempts - 1) { // If it's the last attempt, return null ID
35 | 				return { twitterUsername: twitterUsername, userId: null } // Return null ID on final failure
36 | 			}
37 | 			// Otherwise, it will retry
38 | 		}
39 | 	}
40 | }
41 | 
42 | const chunkArray = (array, size) => {
43 | 	const chunkedArr = []
44 | 	for (let i = 0; i < array.length; i += size) {
45 | 		chunkedArr.push(array.slice(i, i + size))
46 | 	}
47 | 	return chunkedArr
48 | }
49 | 
50 | const processChunk = async (chunk, browser) => {
51 | 	const results = await Promise.allSettled(chunk.map(username => fetchTwitterUserId(username, browser)))
52 | 	return results.map(result => result.value || result.reason)
53 | }
54 | 
55 | const filePath = 'pfp_dict.json'; // Assume this file contains an array of Twitter usernames
56 | 
57 | (async () => {
58 | 	try {
59 | 		const jsonString = fs.readFileSync(filePath, 'utf8')
60 | 		let usernames = JSON.parse(jsonString)
61 | 		usernames = usernames.slice(0, 350)
62 | 		
63 | 		// console.log(usernames)
64 | 		const chunks = chunkArray(usernames, 10) // Create chunks of up to 50 usernames
65 | 		let results = []
66 | 
67 | 		for (const chunk of chunks) {
68 | 			console.log(`Processing a chunk of ${chunk.length} usernames...`)
69 | 			const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox', '--disable-setuid-sandbox'] })
70 | 			const chunkResults = await processChunk(chunk, browser)
71 | 			results = results.concat(chunkResults)
72 | 			await browser.close() // Close the browser after each chunk is processed
73 | 		}
74 | 
75 | 		const resultsJson = JSON.stringify(results, null, 2)
76 | 		fs.writeFileSync('userId_dict.json', resultsJson, 'utf8')
77 | 		console.log('Successfully saved user IDs data to file.')
78 | 	} catch (err) {
79 | 		console.error('Error:', err)
80 | 	}
81 | })()


--------------------------------------------------------------------------------
/extract_mentions_and_dump.js:
--------------------------------------------------------------------------------
  1 | /* eslint-disable no-mixed-spaces-and-tabs */
  2 | /* eslint-disable no-undef */
  3 | const fs = require('fs').promises
  4 | const path = require('path')
  5 | 
  6 | const processUserMentions = async (tweet_data) => {
  7 | 	let screenNameToId = {}
  8 | 	let idToScreenName = {}
  9 | 
 10 | 	tweet_data.forEach(data => {
 11 | 		if (data.tweet.entities?.user_mentions) {
 12 | 			data.tweet.entities.user_mentions.forEach(mention => {
 13 | 				const { screen_name, id_str } = mention
 14 | 				screenNameToId[screen_name] = id_str
 15 | 				idToScreenName[id_str] = screen_name
 16 | 			})
 17 | 		}
 18 | 	})
 19 | 
 20 | 	// Prepare the data to be saved
 21 | 	const dataToSave = {
 22 | 		screenNameToId,
 23 | 		idToScreenName
 24 | 	}
 25 | 
 26 | 	// Save the dictionaries to a file
 27 | 	await fs.writeFile('user_mentions_screen_name_mapping.json', JSON.stringify(dataToSave, null, 2), 'utf8')
 28 | 	console.log('User mentions screen_name mapping saved successfully.')
 29 | }
 30 | 
 31 | 
 32 | const extractTwitterData = (tweet_data) => tweet_data.map(data => {
 33 | 	// Assuming data.tweet is correct, otherwise, adjust accordingly
 34 | 	let { tweet } = data
 35 | 	const timestamp = tweet.created_at
 36 | 	const url_id = tweet.id_str
 37 |   
 38 | 	let userMentions = []
 39 | 	let validUrls = []
 40 |   
 41 | 	if (tweet.entities?.user_mentions) {
 42 | 		userMentions = tweet.entities.user_mentions.map(mention => ({
 43 | 			name: mention.name,
 44 | 			screen_name: mention.screen_name,
 45 | 			id: mention.id,
 46 | 			id_str: mention.id_str
 47 | 		}))
 48 | 	}
 49 |   
 50 | 	if (tweet.entities?.urls) {
 51 | 		validUrls = tweet.entities.urls.filter(url => 
 52 | 			url.expanded_url?.match(/^https:\/\/twitter\.com\/\w+\/status\/\d+/)
 53 | 		).map(url => ({
 54 | 			expanded_url: url.expanded_url,
 55 | 			screen_name: url.expanded_url.split('/')[3]
 56 | 		}))
 57 | 	}
 58 | 
 59 | 	if(validUrls.length > 0) {
 60 | 		console.log(validUrls)
 61 | 	}
 62 |   
 63 | 	return { timestamp, url_id, userMentions, validUrls }
 64 | })
 65 |   
 66 | const aggregateMentionsWeighted = (data) => {
 67 | 	const mentionsCount = {}
 68 | 	const currentTime = new Date() // Get the current time
 69 | 	const decayExponent = 0.5 // Adjust based on how quickly you want older mentions to decay
 70 | 	const decayConstant = 1 // To avoid division by zero in the decay formula
 71 | 	const linearCoefficient = 0.05
 72 | 
 73 | 	data.forEach(tweet => {
 74 | 		// Parse the timestamp from the tweet
 75 | 		const tweetDate = new Date(tweet.timestamp)
 76 | 
 77 | 		console.log(tweetDate)
 78 | 
 79 | 		const timeDiff = Math.max((currentTime - tweetDate) / (1000 * 60 * 60 * 24), 0) // Calculate the time difference in days
 80 | 		console.log('timeDiff', timeDiff)
 81 | 
 82 | 		const timeWeight = 1 / (Math.pow(timeDiff + decayConstant, decayExponent) + linearCoefficient * timeDiff)
 83 | 
 84 | 		tweet.userMentions.forEach(mention => {
 85 | 			const { screen_name, id_str } = mention
 86 | 			if (!mentionsCount[screen_name]) {
 87 | 				mentionsCount[screen_name] = { count: 0, id: id_str }
 88 | 			} else {
 89 | 				// if id is null from a previous validUrl mention, update it with the current id_str
 90 | 				if (mentionsCount[screen_name].id === null) {
 91 | 					mentionsCount[screen_name].id = id_str
 92 | 				}
 93 | 			}
 94 | 
 95 | 			// this is same as mentionsCount[screen_name] = mentionsCount[screen_name] + 1 occurence * timeWeight
 96 | 			mentionsCount[screen_name].count = (mentionsCount[screen_name].count || 0) + timeWeight
 97 | 		})
 98 | 
 99 | 		tweet.validUrls.forEach(mention => {
100 | 			// Assuming validUrls also contains screen_name like userMentions
101 | 			const { screen_name } = mention
102 | 			if (screen_name) { // Make sure screen_name is present
103 | 				if (!mentionsCount[screen_name]) {
104 | 					mentionsCount[screen_name] = { count: 0, id: null}
105 | 				}
106 | 				mentionsCount[screen_name].count += (1 * timeWeight)
107 | 			}
108 | 		})
109 | 	})
110 | 
111 | 	return mentionsCount
112 | }
113 | 
114 | 
115 | const aggregateMentions = (data) => {
116 | 	const mentionsCount = {}
117 | 
118 | 	data.forEach(tweet => {
119 | 		// For each user mention in the tweet, increase the count by 1
120 | 		tweet.userMentions.forEach(mention => {
121 | 			const { screen_name } = mention
122 | 			mentionsCount[screen_name] = (mentionsCount[screen_name] || 0) + 1
123 | 		})
124 | 
125 | 		// (counting quote tweets to other users) assuming validUrls also contains screen_name like userMentions
126 | 		tweet.validUrls.forEach(mention => {
127 | 			const { screen_name } = mention
128 | 			if (screen_name) { // check undefined
129 | 				mentionsCount[screen_name] = (mentionsCount[screen_name] || 0) + 1
130 | 			}
131 | 		})
132 | 	})
133 | 
134 | 	return mentionsCount
135 | }
136 | 
137 | const aggregateMentionsExponentialDynamic = (data) => {
138 | 	const mentionsCount = {}
139 | 	const currentTime = new Date() // Get the current time
140 | 
141 | 	// determine the maximum time difference in your data
142 | 	let maxTimeDiff = 0
143 | 	data.forEach(tweet => {
144 | 		const tweetDate = new Date(tweet.timestamp)
145 | 		const timeDiff = (currentTime - tweetDate) / (1000 * 60 * 60 * 24) // Time difference in days
146 | 		if (timeDiff > maxTimeDiff) {
147 | 			maxTimeDiff = timeDiff
148 | 		}
149 | 	})
150 | 
151 | 	// adjust the decay constant based on the maximum time difference
152 | 	// simple scaling factor 
153 | 	const decayConstantBase = 0.00005 // base decay constant for 1 year
154 | 	const scalingFactor = 365 // scale based on max being 1 year
155 | 	let adjustedDecayConstant = decayConstantBase * (scalingFactor / Math.max(maxTimeDiff, 1))
156 | 
157 | 	data.forEach(tweet => {
158 | 		const tweetDate = new Date(tweet.timestamp)
159 | 		const timeDiff = Math.max((currentTime - tweetDate) / (1000 * 60 * 60 * 24), 0) // Ensure non-negative
160 | 
161 | 		// Apply exponential decay with dynamically adjusted decay constant
162 | 		const timeWeight = Math.exp(-adjustedDecayConstant * timeDiff)
163 | 
164 | 		tweet.userMentions.forEach(mention => {
165 | 			const { screen_name } = mention
166 | 			mentionsCount[screen_name] = (mentionsCount[screen_name] || 0) + timeWeight
167 | 		})
168 | 
169 | 		tweet.validUrls.forEach(mention => {
170 | 			const { screen_name } = mention
171 | 			if (screen_name) { // Ensure screen_name is present
172 | 				mentionsCount[screen_name] = (mentionsCount[screen_name] || 0) + timeWeight
173 | 			}
174 | 		})
175 | 	})
176 | 
177 | 	return mentionsCount
178 | }
179 | 
180 | 
181 | const processAndSaveMentions = async (data, userHandle, userId, aggregationFunction, fileName) => {
182 |     
183 | 	const mentionsCount = aggregationFunction(data)
184 | 
185 | 	let sortedMentionsArray
186 | 	
187 | 	if (aggregationFunction === aggregateMentionsWeighted) {
188 | 		sortedMentionsArray = Object.entries(mentionsCount)
189 | 			.filter(([, value]) => value.count != null && !isNaN(value.count))
190 | 			.sort((a, b) => b[1].count - a[1].count)
191 | 
192 | 	  } else {
193 | 		sortedMentionsArray = Object.entries(mentionsCount)
194 | 			.filter(([, value]) => value != null && !isNaN(value))
195 | 			.sort((a, b) => b[1] - a[1])
196 | 	  }
197 | 	// to put in the center
198 | 	sortedMentionsArray.unshift([userHandle, { count: 1000, id: userId }])
199 |     
200 | 	const sortedMentionsObject = Object.fromEntries(sortedMentionsArray)
201 | 	await fs.writeFile(fileName, JSON.stringify(sortedMentionsObject, null, 2), 'utf8')
202 | }
203 | 
204 | 
205 | const processTweets = async () => {
206 | 	try {
207 | 		const filePath = path.join(__dirname, 'twitter-archive/data/tweets.js')
208 | 		const data = await fs.readFile(filePath, 'utf8')
209 | 		const jsonPart = data.substring(data.indexOf('=') + 1).trim()
210 | 		const tweets = JSON.parse(jsonPart)
211 | 		
212 | 
213 | 		processUserMentions(tweets) // create the mapping that we will use later.
214 | 
215 | 		const extractedData = extractTwitterData(tweets)
216 | 		const filteredData = extractedData.filter(item => item.userMentions.length > 0 || item.validUrls.length > 0)
217 |     
218 | 		const accountFilePath = path.join(__dirname, 'twitter-archive/data/account.js')
219 | 		const accountData = await fs.readFile(accountFilePath, 'utf8')
220 | 		// Extract the JSON part from the account.js file
221 | 		const accountJsonPart = accountData.substring(accountData.indexOf('['))
222 | 		const account = JSON.parse(accountJsonPart)
223 |   
224 | 		// Extract the username from the account information
225 | 		const user_handle = account[0].account.username
226 | 		const user_id = account[0].account.accountId
227 | 		console.log('Username:', user_handle)   
228 | 
229 | 		const filteredDataWithoutUser = filteredData.filter(item => {
230 | 			const hasUserMention = item.userMentions?.some(mention => mention.screen_name === user_handle)
231 | 			const hasValidUrl = item.validUrls?.some(url => url.screen_name === user_handle)
232 | 			return !hasUserMention && !hasValidUrl
233 | 		})
234 |         
235 | 		await fs.mkdir(path.join(__dirname, 'mentions_count_folder'), { recursive: true })
236 | 
237 | 		await processAndSaveMentions(filteredDataWithoutUser, user_handle, user_id, aggregateMentionsWeighted, 'mentions_count_folder/mentionsCountWeighted.json')
238 | 		await processAndSaveMentions(filteredDataWithoutUser, user_handle, user_id, aggregateMentions, 'mentions_count_folder/mentionsCountPure.json')
239 | 		await processAndSaveMentions(filteredDataWithoutUser, user_handle, user_id, aggregateMentionsExponentialDynamic, 'mentions_count_folder/mentionsCountExponentialDecay.json')
240 |   
241 | 		console.log('Data saved successfully.')
242 | 	} catch (error) {
243 | 		console.error('Error processing file:', error)
244 | 	}
245 | }
246 |   
247 | processTweets()
248 |   


--------------------------------------------------------------------------------
/index.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 | <meta charset="UTF-8">
  5 | <title>Twitter Circle Visualization</title>
  6 | <link rel="icon" href="https://pbs.twimg.com/profile_images/1692481211888025600/lUJUEO_p_400x400.jpg" type="image/png">
  7 | <script src="https://d3js.org/d3.v6.min.js"></script>
  8 | <style>
  9 |     body {
 10 |     font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
 11 |     font-size: 2rem;
 12 |     position: relative;
 13 |     margin:0;
 14 |     padding: 0;
 15 |     display: flex;
 16 |     flex-direction: column; /* Stack elements vertically */
 17 |     align-items: center;
 18 |     justify-content: flex-start; /* Align content to the top */
 19 |     height: 100vh;
 20 |     margin: 0;
 21 |     background: linear-gradient(to bottom right, #fdf6e3, #e2c38a);
 22 |     
 23 | 
 24 |     color: #CF2D01;
 25 |     }
 26 |     
 27 |     .node-foreign-object {
 28 |     transition: transform 0.2s; /* Smooth transition for any transforms */
 29 |     transform-origin: 50% 50%; /* Center the scaling transformation */
 30 |     transform-box: fill-box; /* Refer to the object's bounding box for the origin */
 31 |     border-radius: 50%; /* Keeps the circular shape */
 32 |     overflow: hidden; /* Ensures the content does not spill out on scale */
 33 | 
 34 |     box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* May remove this if feels cringe */
 35 |     }
 36 | 
 37 |     .node-foreign-object:hover {
 38 |     transform: scale(1.4); /* Enlarges the foreignObject on hover */
 39 |     cursor: pointer;
 40 |     }
 41 | 
 42 |     .node-img {
 43 |     width: 100%;
 44 |     height: 100%;
 45 |     object-fit: cover; /* Cover the area without stretching */
 46 |     border-radius: 50%; /* Ensures the image is circular */
 47 |     }
 48 | 
 49 |     label {
 50 |         margin-bottom: 20px; /* Space between the label and the slider */
 51 |         font-size: 1.5rem; /* Larger font size for readability */
 52 |     }
 53 | 
 54 |     #slider-container {
 55 |         font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
 56 |         position: absolute; /* Position the container absolutely */
 57 |         bottom: 10px; /* Adjust the bottom position as needed */
 58 |         left: 50%; /* Center the container horizontally */
 59 |         transform: translateX(-50%); /* Adjust for the container's width */
 60 |         text-align: center;
 61 |     }
 62 | 
 63 |     svg {
 64 |         width: 100vw;
 65 |         height:100vh;
 66 |     }
 67 | 
 68 |     svg#network {
 69 |         max-width: 95vw; /* Limit SVG size for very large screens */
 70 |         max-height: 95vh; /* Adjust height automatically */
 71 |         margin-top: 10px; /* Add space between the slider and the SVG */
 72 | 
 73 |     }
 74 |  
 75 | 
 76 |     #pfpCountSlider {
 77 |         -webkit-appearance: none;
 78 |         width: 25vw;
 79 |         height: 15px;
 80 |         border-radius: 5px;
 81 |         background: #d3d3d3;
 82 |         outline: none;
 83 |         opacity: 0.7;
 84 |         -webkit-transition: .2s;
 85 |         transition: opacity .2s;
 86 |     }
 87 | 
 88 |     #pfpCountSlider::-webkit-slider-thumb {
 89 |     -webkit-appearance: none;
 90 |     appearance: none;
 91 |     width: 25px;
 92 |     height: 25px;
 93 |     border-radius: 50%;
 94 |     background: #CF2D01;
 95 |     cursor: pointer;
 96 |     }
 97 | 
 98 | #pfpCountSlider::-moz-range-thumb {
 99 |     width: 25px;
100 |     height: 25px;
101 |     border-radius: 50%;
102 |     background: #CF2D01;
103 |     cursor: pointer;
104 |     }
105 | 
106 |     @media (max-width: 768px) { /* Adjustments for tablets and mobile phones */
107 |     #slider-container {
108 |         width: 90%; /* Make the slider container take more space */
109 |     }
110 | 
111 |     #pfpCountSlider {
112 |         width: 100%; /* Make the slider adapt to the container width */
113 |     }
114 | 
115 |     svg#network {
116 |         max-width: 100%; /* Allow the SVG to fill the container on smaller screens */
117 |     }
118 |     }
119 | 
120 | 
121 |     #cornerImage {
122 |         position: absolute;
123 |         bottom: 4vh;
124 |         left: 6vw;
125 |         width: auto; /* Adjust the width automatically to maintain aspect ratio */
126 |         height: 25vh; /* Start with a relative height, adjust as needed */
127 |         max-width: 35vw; /* Ensures the image does not exceed this width */
128 |         max-height: 35vh; /* Ensures the image does not exceed this height */
129 |         min-width: 100px;
130 |         min-height: 100px;
131 |     }
132 | 
133 |     #leaderboardButton {
134 |         
135 |         position: absolute;
136 |         top: 2vh; /* 2% of the viewport height */
137 |         right: 2vw; /* 5% of the viewport width */
138 |         padding: 0.5vw 1vw; /* Scales padding with the viewport width */
139 |         background-color: inherit;
140 |         color: #CF2D01;
141 |         border: none;
142 |         border-radius: 5px;
143 |         cursor: pointer;
144 |         transition: background-color 0.2s ease-in-out;
145 |         font-size: 1.5rem; /* Optionally make the font size responsive */
146 |     }
147 | 
148 | 
149 |     #leaderboardButton:hover {
150 |         background-color: #ecb679; /* Slightly darker shade for hover effect */
151 |     }
152 | 
153 |     #dmStatsButton {
154 |         position: absolute;
155 |         top: 8vh; /* 2% of the viewport height */
156 |         right: 2vw; /* 5% of the viewport width */
157 |         padding: 0.5vw 1vw; /* Scales padding with the viewport width */
158 |         background-color: inherit;
159 |         color: #CF2D01;
160 |         border: none;
161 |         border-radius: 5px;
162 |         cursor: pointer;
163 |         transition: background-color 0.2s ease-in-out;
164 |         font-size: 1.5rem; /* Optionally make the font size responsive */
165 |     }
166 | 
167 | 
168 |     #dmStatsButton:hover {
169 |         background-color: #ecb679; /* Slightly darker shade for hover effect */
170 |     }
171 | 
172 |     .custom-tooltip {
173 |     display: none; /* Hide tooltip by default */
174 |     position: absolute;
175 |     background-color: white;
176 |     color: #CF2D01;
177 |     padding: 5px 10px;
178 |     border-radius: 6px;
179 |     font-size: 0.75rem;
180 |     z-index: 10;
181 | }
182 | 
183 | .node-username {
184 |     fill: #ff6f42;
185 |     font-weight: bold;
186 |     text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
187 |     font-size: 10px;
188 | }
189 | 
190 | #toggleUsernamesButton {
191 |     position: absolute;
192 |     top: 14vh;
193 |     right: 2vw;
194 |     padding: 0.5vw 1vw;
195 |     background-color: inherit;
196 |     color: #CF2D01;
197 |     border: none;
198 |     border-radius: 5px;
199 |     cursor: pointer;
200 |     transition: background-color 0.2s ease-in-out;
201 |     font-size: 1.5rem;
202 | }
203 | 
204 | #toggleUsernamesButton:hover {
205 |     background-color: #ecb679;
206 | }
207 | </style>
208 | </head>
209 | <body>
210 |     <div id="tooltip" class="custom-tooltip"></div>
211 |     <button id="leaderboardButton">Leaderboard</button>
212 |     <button id="dmStatsButton" class="navigation-button">DM stats</button>
213 |     <button id="toggleUsernamesButton">Toggle Usernames</button>
214 |     <img src="https://images.gamebanana.com/img/ico/sprays/627d932c150ba.png" alt="Description" id="cornerImage">    
215 |     
216 |     <svg id="network" width="2000" height="3000"></svg>
217 |     <div id="slider-container">
218 |     <label for="pfpCountSlider"><span id="pfpCount">200</span></label>
219 |     <input type="range" id="pfpCountSlider" min="1" max="200" value="200" step="1">
220 | </div>
221 | <script>
222 | // Load the data from the JSON file
223 |     document.getElementById('leaderboardButton').addEventListener('click', function() {
224 |         window.location.href = 'leaderboard.html';
225 |     });
226 |     document.getElementById('dmStatsButton').addEventListener('click', function() {
227 |         window.location.href = 'dm_stats.html';
228 |     });
229 | 
230 |    
231 | 
232 |     let center = { x: 0, y: 0 };
233 | 
234 |     function updateCenter() {
235 |         const svg = d3.select('#network').node();
236 |         const width = svg.clientWidth || svg.parentNode.clientWidth;
237 |         const height = svg.clientHeight || svg.parentNode.clientHeight;
238 |         center.x = width / 2;
239 |         center.y = height / 2;
240 |     }
241 | 
242 | 
243 |     d3.json('final_weights_with_pics.json').then(function(data) {
244 |         updateCenter();
245 |     data = data.slice(0, 200)
246 |     const maxProfiles = data.length;
247 |     document.getElementById('pfpCountSlider').max = maxProfiles;
248 |     document.getElementById('pfpCountSlider').value = maxProfiles / 2;
249 |     document.getElementById('pfpCount').textContent = 100; // Default to all
250 | 
251 |     const svg = d3.select('#network'),
252 |     width = +svg.attr("width"),
253 |     height = +svg.attr("height"),
254 |     nodeRadius = 30, // Radius for the profile images
255 |     spacingBetweenNodes = 2, // Spacing between nodes
256 |     spacingBetweenCircles = 20; // Spacing between concentric circles
257 |     let centralNodeRadius = nodeRadius * 1.5;
258 | 
259 |     // Function to calculate positions
260 |     function calculatePositions(data, startRadius) {
261 |     let currentRadius = startRadius, // Adjust initial radius to start from outside the center node
262 |         currentAngle = 0,
263 |         positions = [],
264 |         nodesInThisCircle,
265 |         circumference;
266 | 
267 |    
268 |     // Place the center node
269 |     if (data.length > 0 && data[0].imageSrc !== null) {
270 |         positions.push({ twitterUsername: data[0].twitterUsername, imageSrc: data[0].imageSrc, x: center.x, y: center.y, radius: centralNodeRadius });
271 |     }
272 | 
273 |     // Start from the second item if the first one is used for the center node
274 |     data.slice(1).forEach((d, i) => {
275 |         if (d.imageSrc === null) {
276 |             return
277 |         }
278 | 
279 |         circumference = 2 * Math.PI * (currentRadius);
280 |         nodesInThisCircle = Math.floor(circumference / (nodeRadius * 2 + spacingBetweenNodes));
281 | 
282 |         if (currentAngle >= 2 * Math.PI) {
283 |             currentRadius += (nodeRadius * 2) + spacingBetweenCircles; // Adjust for next circle
284 |             currentAngle = 0; // Reset angle for next circle
285 |         }
286 | 
287 |         const x = center.x + Math.cos(currentAngle) * currentRadius;
288 |         const y = center.y + Math.sin(currentAngle) * currentRadius;
289 |         positions.push({ twitterUsername: d.twitterUsername, imageSrc: d.imageSrc, x, y });
290 | 
291 |         // Update for next node
292 |         currentAngle += (2 * Math.PI) / nodesInThisCircle;
293 |     });
294 | 
295 |     return positions;
296 | }
297 | 
298 | function drawNodes(filteredData) {
299 |         // Clear existing SVG content
300 |         svg.selectAll("*").remove();
301 | 
302 | 
303 | 
304 |         const nodePositions = calculatePositions(filteredData, nodeRadius * 2 + spacingBetweenCircles);
305 |         const simulation = d3.forceSimulation(nodePositions)
306 |             .force("center", d3.forceCenter(center.x, center.y))
307 |             .force("collide", d3.forceCollide().radius(d => nodeRadius * 1.5).strength(0.7));
308 | 
309 |         // Run the simulation for a few iterations
310 |         for (let i = 0; i < 15; ++i) simulation.tick();
311 | 
312 |         // Draw the nodes
313 |         nodePositions.forEach(function(d) {
314 |             const currentRadius = d.radius || nodeRadius; 
315 |             const foreignObject = svg.append('foreignObject')
316 |                 .attr('class', 'node-foreign-object')
317 |                 .attr('x', d.x - currentRadius)
318 |                 .attr('y', d.y - currentRadius)
319 |                 .attr('width', currentRadius * 2)
320 |                 .attr('height', currentRadius * 2)
321 |                 .on('mouseover', function(event) {
322 |                 // Show tooltip
323 |                 d3.select('#tooltip')
324 |                     .style('display', 'block')
325 |                     .html(d.twitterUsername); // Use innerHTML or textContent if plain text
326 |                 })
327 |                 .on('mousemove', function(event) {
328 |                     // Position tooltip
329 |                     d3.select('#tooltip')
330 |                         .style('left', (event.pageX + 10) + 'px')
331 |                         .style('top', (event.pageY + 10) + 'px');
332 |                 })
333 |                 .on('mouseout', function() {
334 |                     // Hide tooltip
335 |                     d3.select('#tooltip').style('display', 'none');
336 |                 });
337 | 
338 |             const div = foreignObject.append('xhtml:div')
339 |                 .style('width', `${currentRadius * 2}px`)
340 |                 .style('height', `${currentRadius * 2}px`)
341 |                 .style('border-radius', '50%')
342 |                 .style('overflow', 'hidden');
343 | 
344 |             div.append('xhtml:img')
345 |                 .attr('class', 'node-img')
346 |                 .attr('src', d.imageSrc)
347 |                 .style('width', '100%')
348 |                 .style('height', '100%')
349 |                 .attr('onerror', "this.src='https://assets.pokemon.com/assets/cms2/img/pokedex/full/054.png'")
350 |                 .on('click', () => window.open(`https://twitter.com/${d.twitterUsername}`, '_blank'));
351 | 
352 |             svg.append('text')
353 |             .attr('class', 'node-username')
354 |             .attr('x', d.x)
355 |             .attr('y', d.y + currentRadius + 15) // Position the text below the circle
356 |             .attr('text-anchor', 'middle')
357 |             .style('font-size', '12px')
358 |             .text(d.twitterUsername);
359 |         });
360 |     }
361 | 
362 | 
363 |     drawNodes(data.slice(0, 100));
364 | 
365 |     document.getElementById('pfpCountSlider').addEventListener('input', function() {
366 |         updateCenter();
367 |         const value = this.value;
368 |         const filteredData = data.slice(0, value);
369 |         document.getElementById('pfpCount').textContent = value; // Update the displayed count
370 | 
371 |         drawNodes(filteredData); // Redraw with the filtered data
372 |     });
373 | 
374 |     window.addEventListener('resize', function() {
375 |         updateCenter();
376 |         // You may need to call a function to redraw your visualization here
377 |         // For example:
378 |         const value = document.getElementById('pfpCountSlider').value
379 |         const filteredData = data.slice(0, value);
380 |         drawNodes(filteredData); // Assuming 'data' is accessible, or you need to manage its scope
381 |     });
382 | 
383 |     let usernamesVisible = true;
384 | 
385 |     document.getElementById('toggleUsernamesButton').addEventListener('click', function() {
386 |         usernamesVisible = !usernamesVisible;
387 |         svg.selectAll('.node-username')
388 |             .style('display', usernamesVisible ? 'block' : 'none');
389 |     });
390 |     
391 | });
392 | 
393 | </script>
394 | </body>
395 | </html>
396 | 


--------------------------------------------------------------------------------
/leaderboard.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |     <meta charset="UTF-8">
  5 |     <meta name="viewport" content="width=device-width, initial-scale=1.0">
  6 |     <title>Leaderboard</title>
  7 |     <link rel="icon" href="https://pbs.twimg.com/profile_images/1692481211888025600/lUJUEO_p_400x400.jpg" type="image/png">
  8 |     <style>
  9 |         body {
 10 |             /* font-family:Helvetica, Helvetica, Helvetica; */
 11 |             font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
 12 |             margin: 0;
 13 |             padding: 10px;
 14 |             background-color: #f9e4bc;
 15 |             color: #CF2D01;
 16 |             text-align: center;
 17 |         }
 18 | 
 19 |         h1 {
 20 |             text-align: center;
 21 |             font-size: 2.5rem;
 22 |             margin-bottom: 10px;
 23 |         }
 24 | 
 25 |         p {
 26 |             font-size: 1.1rem;
 27 |             margin-bottom: 30px;
 28 |         }
 29 | 
 30 |         #leaderboard {
 31 |             display: flex;
 32 |             flex-direction: column;
 33 |             align-items: center;
 34 |         }
 35 |         
 36 |         .user {
 37 |             background-color: f9e4bc;
 38 |             border: 1px solid #CF2D01; /* Specifies the border width, style, and color */
 39 |             padding: 10px;
 40 |             margin: 15px;
 41 |             width: 45vw; /* Adjust width here */
 42 |             display: flex;
 43 |             align-items: center;
 44 |             border-radius: 10px;
 45 |             cursor: pointer; /* Makes the mouse cursor change to a pointer on hover */
 46 |             transition: transform 0.2s; /* Smooth transformation on click */
 47 |         }
 48 | 
 49 |         .user:hover {
 50 |             transform: scale(1.02); /* Slightly enlarges the card on hover */
 51 |             box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
 52 |         }
 53 |         .user:hover::after {
 54 |             content: 'Click to open profile on Twitter';
 55 |             position: absolute;
 56 |             bottom: -2.5em;
 57 |             left: 50%;
 58 |             transform: translateX(-50%);
 59 |             background-color: #ecb679;
 60 |             color: #a65336;
 61 |             padding: 8px;
 62 |             border-radius: 5px;
 63 |             font-size: 0.9em;
 64 |             white-space: nowrap;
 65 |             border: 1px solid #d9a993;
 66 |         }
 67 |         .user img {
 68 |             border-radius: 50%;
 69 |             margin-right: 20px;
 70 |             width: 80px;
 71 |             height: 80px;
 72 |         }
 73 |         .username {
 74 |             font-weight: 600;
 75 |             font-size: 1.2rem;
 76 |         }
 77 |         .weight {
 78 |             margin-left: auto;
 79 |             font-size: large;
 80 |             font-weight: bold;
 81 |         }
 82 |         
 83 |         #backButton {
 84 |             position: absolute;
 85 |             font-size: 1.1rem;
 86 |             top: 2vh;
 87 |             right: 2vw;
 88 |             padding: 0.5vw 1vw;
 89 |             background-color: inherit;
 90 |             color: #CF2D01;
 91 |             font-family: Helvetica, Arial, sans-serif;
 92 |             border: none;
 93 |             border-radius: 5px;
 94 |             cursor: pointer;
 95 |             transition: background-color 0.2s ease-in-out;
 96 |         }
 97 |         #backButton:hover {
 98 |             background-color: #ecb679;
 99 |         }
100 |     </style>
101 | </head>
102 | <body>
103 |     
104 |  <button id="backButton">Back</button>
105 |     <h1>Leaderboard</h1>
106 |     <p>Based on combined weightage of replies, quote tweets and direct messages</p>
107 |     <div id="leaderboard"></div>
108 |     
109 |     <script>
110 | 
111 |        
112 | 
113 |         document.getElementById('backButton').addEventListener('click', function() {
114 |             window.location.href = 'index.html';
115 |         });
116 | 
117 | 
118 | 
119 |         document.addEventListener('DOMContentLoaded', function() {
120 |             fetch('final_weights_with_pics.json')
121 |                 .then(response => response.json())
122 |                 .then(data => {
123 |                     createLeaderboard(data);
124 |                 })
125 |                 .catch(error => console.error('Error loading the data:', error));
126 |         });
127 | 
128 |         function createLeaderboard(users) {
129 |             const leaderboard = document.getElementById('leaderboard');
130 |             // Sort users by weight in descending order
131 |             const filteredAndSortedUsers = users
132 |             .filter(({ weight }) => weight != null && !isNaN(weight))
133 |             .sort((a, b) => b.weight - a.weight);
134 | 
135 | 
136 |             let idx = 0
137 |             filteredAndSortedUsers.forEach(user => {
138 |                 if (idx === 0){
139 |                     idx += 1
140 |                     return
141 |                 }
142 |                 const userElement = document.createElement('div');
143 |                 userElement.className = 'user';
144 |                 userElement.innerHTML = `
145 |                     <img src="${user.imageSrc}" alt="${user.twitterUsername}" width="60" height="60">
146 |                     <div class="username"> ${idx}. ${user.twitterUsername}</div>
147 |                     <div class="weight">Score: ${user.weight.toFixed(2)}</div>
148 |                 `;
149 |                 // Make the card clickable and redirect to the user's Twitter profile
150 |                 userElement.onclick = function() {
151 |                 window.open(`https://twitter.com/${user.twitterUsername}`, '_blank');
152 |                 };
153 |                 leaderboard.appendChild(userElement);
154 |                 idx = idx + 1
155 |             });
156 |         }
157 |     </script>
158 | </body>
159 | </html>
160 | 


--------------------------------------------------------------------------------
/package-lock.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "name": "twitter_circle",
   3 |   "lockfileVersion": 3,
   4 |   "requires": true,
   5 |   "packages": {
   6 |     "": {
   7 |       "dependencies": {
   8 |         "http-server": "^14.1.1",
   9 |         "is-reachable": "^5.2.1",
  10 |         "open": "^10.0.4",
  11 |         "puppeteer": "^22.3.0"
  12 |       }
  13 |     },
  14 |     "node_modules/@babel/code-frame": {
  15 |       "version": "7.23.5",
  16 |       "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.23.5.tgz",
  17 |       "integrity": "sha512-CgH3s1a96LipHCmSUmYFPwY7MNx8C3avkq7i4Wl3cfa662ldtUe4VM1TPXX70pfmrlWTb6jLqTYrZyT2ZTJBgA==",
  18 |       "dependencies": {
  19 |         "@babel/highlight": "^7.23.4",
  20 |         "chalk": "^2.4.2"
  21 |       },
  22 |       "engines": {
  23 |         "node": ">=6.9.0"
  24 |       }
  25 |     },
  26 |     "node_modules/@babel/helper-validator-identifier": {
  27 |       "version": "7.22.20",
  28 |       "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.20.tgz",
  29 |       "integrity": "sha512-Y4OZ+ytlatR8AI+8KZfKuL5urKp7qey08ha31L8b3BwewJAoJamTzyvxPR/5D+KkdJCGPq/+8TukHBlY10FX9A==",
  30 |       "engines": {
  31 |         "node": ">=6.9.0"
  32 |       }
  33 |     },
  34 |     "node_modules/@babel/highlight": {
  35 |       "version": "7.23.4",
  36 |       "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.23.4.tgz",
  37 |       "integrity": "sha512-acGdbYSfp2WheJoJm/EBBBLh/ID8KDc64ISZ9DYtBmC8/Q204PZJLHyzeB5qMzJ5trcOkybd78M4x2KWsUq++A==",
  38 |       "dependencies": {
  39 |         "@babel/helper-validator-identifier": "^7.22.20",
  40 |         "chalk": "^2.4.2",
  41 |         "js-tokens": "^4.0.0"
  42 |       },
  43 |       "engines": {
  44 |         "node": ">=6.9.0"
  45 |       }
  46 |     },
  47 |     "node_modules/@puppeteer/browsers": {
  48 |       "version": "2.1.0",
  49 |       "resolved": "https://registry.npmjs.org/@puppeteer/browsers/-/browsers-2.1.0.tgz",
  50 |       "integrity": "sha512-xloWvocjvryHdUjDam/ZuGMh7zn4Sn3ZAaV4Ah2e2EwEt90N3XphZlSsU3n0VDc1F7kggCjMuH0UuxfPQ5mD9w==",
  51 |       "dependencies": {
  52 |         "debug": "4.3.4",
  53 |         "extract-zip": "2.0.1",
  54 |         "progress": "2.0.3",
  55 |         "proxy-agent": "6.4.0",
  56 |         "semver": "7.6.0",
  57 |         "tar-fs": "3.0.5",
  58 |         "unbzip2-stream": "1.4.3",
  59 |         "yargs": "17.7.2"
  60 |       },
  61 |       "bin": {
  62 |         "browsers": "lib/cjs/main-cli.js"
  63 |       },
  64 |       "engines": {
  65 |         "node": ">=18"
  66 |       }
  67 |     },
  68 |     "node_modules/@sindresorhus/is": {
  69 |       "version": "4.6.0",
  70 |       "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-4.6.0.tgz",
  71 |       "integrity": "sha512-t09vSN3MdfsyCHoFcTRCH/iUtG7OJ0CsjzB8cjAmKc/va/kIgeDI/TxsigdncE/4be734m0cvIYwNaV4i2XqAw==",
  72 |       "engines": {
  73 |         "node": ">=10"
  74 |       },
  75 |       "funding": {
  76 |         "url": "https://github.com/sindresorhus/is?sponsor=1"
  77 |       }
  78 |     },
  79 |     "node_modules/@szmarczak/http-timer": {
  80 |       "version": "4.0.6",
  81 |       "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-4.0.6.tgz",
  82 |       "integrity": "sha512-4BAffykYOgO+5nzBWYwE3W90sBgLJoUPRWWcL8wlyiM8IB8ipJz3UMJ9KXQd1RKQXpKp8Tutn80HZtWsu2u76w==",
  83 |       "dependencies": {
  84 |         "defer-to-connect": "^2.0.0"
  85 |       },
  86 |       "engines": {
  87 |         "node": ">=10"
  88 |       }
  89 |     },
  90 |     "node_modules/@tootallnate/quickjs-emscripten": {
  91 |       "version": "0.23.0",
  92 |       "resolved": "https://registry.npmjs.org/@tootallnate/quickjs-emscripten/-/quickjs-emscripten-0.23.0.tgz",
  93 |       "integrity": "sha512-C5Mc6rdnsaJDjO3UpGW/CQTHtCKaYlScZTly4JIu97Jxo/odCiH0ITnDXSJPTOrEKk/ycSZ0AOgTmkDtkOsvIA=="
  94 |     },
  95 |     "node_modules/@types/cacheable-request": {
  96 |       "version": "6.0.3",
  97 |       "resolved": "https://registry.npmjs.org/@types/cacheable-request/-/cacheable-request-6.0.3.tgz",
  98 |       "integrity": "sha512-IQ3EbTzGxIigb1I3qPZc1rWJnH0BmSKv5QYTalEwweFvyBDLSAe24zP0le/hyi7ecGfZVlIVAg4BZqb8WBwKqw==",
  99 |       "dependencies": {
 100 |         "@types/http-cache-semantics": "*",
 101 |         "@types/keyv": "^3.1.4",
 102 |         "@types/node": "*",
 103 |         "@types/responselike": "^1.0.0"
 104 |       }
 105 |     },
 106 |     "node_modules/@types/http-cache-semantics": {
 107 |       "version": "4.0.4",
 108 |       "resolved": "https://registry.npmjs.org/@types/http-cache-semantics/-/http-cache-semantics-4.0.4.tgz",
 109 |       "integrity": "sha512-1m0bIFVc7eJWyve9S0RnuRgcQqF/Xd5QsUZAZeQFr1Q3/p9JWoQQEqmVy+DPTNpGXwhgIetAoYF8JSc33q29QA=="
 110 |     },
 111 |     "node_modules/@types/keyv": {
 112 |       "version": "3.1.4",
 113 |       "resolved": "https://registry.npmjs.org/@types/keyv/-/keyv-3.1.4.tgz",
 114 |       "integrity": "sha512-BQ5aZNSCpj7D6K2ksrRCTmKRLEpnPvWDiLPfoGyhZ++8YtiK9d/3DBKPJgry359X/P1PfruyYwvnvwFjuEiEIg==",
 115 |       "dependencies": {
 116 |         "@types/node": "*"
 117 |       }
 118 |     },
 119 |     "node_modules/@types/node": {
 120 |       "version": "20.11.24",
 121 |       "resolved": "https://registry.npmjs.org/@types/node/-/node-20.11.24.tgz",
 122 |       "integrity": "sha512-Kza43ewS3xoLgCEpQrsT+xRo/EJej1y0kVYGiLFE1NEODXGzTfwiC6tXTLMQskn1X4/Rjlh0MQUvx9W+L9long==",
 123 |       "dependencies": {
 124 |         "undici-types": "~5.26.4"
 125 |       }
 126 |     },
 127 |     "node_modules/@types/responselike": {
 128 |       "version": "1.0.3",
 129 |       "resolved": "https://registry.npmjs.org/@types/responselike/-/responselike-1.0.3.tgz",
 130 |       "integrity": "sha512-H/+L+UkTV33uf49PH5pCAUBVPNj2nDBXTN+qS1dOwyyg24l3CcicicCA7ca+HMvJBZcFgl5r8e+RR6elsb4Lyw==",
 131 |       "dependencies": {
 132 |         "@types/node": "*"
 133 |       }
 134 |     },
 135 |     "node_modules/@types/yauzl": {
 136 |       "version": "2.10.3",
 137 |       "resolved": "https://registry.npmjs.org/@types/yauzl/-/yauzl-2.10.3.tgz",
 138 |       "integrity": "sha512-oJoftv0LSuaDZE3Le4DbKX+KS9G36NzOeSap90UIK0yMA/NhKJhqlSGtNDORNRaIbQfzjXDrQa0ytJ6mNRGz/Q==",
 139 |       "optional": true,
 140 |       "dependencies": {
 141 |         "@types/node": "*"
 142 |       }
 143 |     },
 144 |     "node_modules/agent-base": {
 145 |       "version": "7.1.0",
 146 |       "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.0.tgz",
 147 |       "integrity": "sha512-o/zjMZRhJxny7OyEF+Op8X+efiELC7k7yOjMzgfzVqOzXqkBkWI79YoTdOtsuWd5BWhAGAuOY/Xa6xpiaWXiNg==",
 148 |       "dependencies": {
 149 |         "debug": "^4.3.4"
 150 |       },
 151 |       "engines": {
 152 |         "node": ">= 14"
 153 |       }
 154 |     },
 155 |     "node_modules/aggregate-error": {
 156 |       "version": "3.1.0",
 157 |       "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-3.1.0.tgz",
 158 |       "integrity": "sha512-4I7Td01quW/RpocfNayFdFVk1qSuoh0E7JrbRJ16nH01HhKFQ88INq9Sd+nd72zqRySlr9BmDA8xlEJ6vJMrYA==",
 159 |       "dependencies": {
 160 |         "clean-stack": "^2.0.0",
 161 |         "indent-string": "^4.0.0"
 162 |       },
 163 |       "engines": {
 164 |         "node": ">=8"
 165 |       }
 166 |     },
 167 |     "node_modules/ansi-regex": {
 168 |       "version": "5.0.1",
 169 |       "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
 170 |       "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
 171 |       "engines": {
 172 |         "node": ">=8"
 173 |       }
 174 |     },
 175 |     "node_modules/ansi-styles": {
 176 |       "version": "3.2.1",
 177 |       "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
 178 |       "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
 179 |       "dependencies": {
 180 |         "color-convert": "^1.9.0"
 181 |       },
 182 |       "engines": {
 183 |         "node": ">=4"
 184 |       }
 185 |     },
 186 |     "node_modules/argparse": {
 187 |       "version": "2.0.1",
 188 |       "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
 189 |       "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q=="
 190 |     },
 191 |     "node_modules/arrify": {
 192 |       "version": "2.0.1",
 193 |       "resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
 194 |       "integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==",
 195 |       "engines": {
 196 |         "node": ">=8"
 197 |       }
 198 |     },
 199 |     "node_modules/ast-types": {
 200 |       "version": "0.13.4",
 201 |       "resolved": "https://registry.npmjs.org/ast-types/-/ast-types-0.13.4.tgz",
 202 |       "integrity": "sha512-x1FCFnFifvYDDzTaLII71vG5uvDwgtmDTEVWAxrgeiR8VjMONcCXJx7E+USjDtHlwFmt9MysbqgF9b9Vjr6w+w==",
 203 |       "dependencies": {
 204 |         "tslib": "^2.0.1"
 205 |       },
 206 |       "engines": {
 207 |         "node": ">=4"
 208 |       }
 209 |     },
 210 |     "node_modules/b4a": {
 211 |       "version": "1.6.6",
 212 |       "resolved": "https://registry.npmjs.org/b4a/-/b4a-1.6.6.tgz",
 213 |       "integrity": "sha512-5Tk1HLk6b6ctmjIkAcU/Ujv/1WqiDl0F0JdRCR80VsOcUlHcu7pWeWRlOqQLHfDEsVx9YH/aif5AG4ehoCtTmg=="
 214 |     },
 215 |     "node_modules/bare-events": {
 216 |       "version": "2.2.1",
 217 |       "resolved": "https://registry.npmjs.org/bare-events/-/bare-events-2.2.1.tgz",
 218 |       "integrity": "sha512-9GYPpsPFvrWBkelIhOhTWtkeZxVxZOdb3VnFTCzlOo3OjvmTvzLoZFUT8kNFACx0vJej6QPney1Cf9BvzCNE/A==",
 219 |       "optional": true
 220 |     },
 221 |     "node_modules/bare-fs": {
 222 |       "version": "2.2.1",
 223 |       "resolved": "https://registry.npmjs.org/bare-fs/-/bare-fs-2.2.1.tgz",
 224 |       "integrity": "sha512-+CjmZANQDFZWy4PGbVdmALIwmt33aJg8qTkVjClU6X4WmZkTPBDxRHiBn7fpqEWEfF3AC2io++erpViAIQbSjg==",
 225 |       "optional": true,
 226 |       "dependencies": {
 227 |         "bare-events": "^2.0.0",
 228 |         "bare-os": "^2.0.0",
 229 |         "bare-path": "^2.0.0",
 230 |         "streamx": "^2.13.0"
 231 |       }
 232 |     },
 233 |     "node_modules/bare-os": {
 234 |       "version": "2.2.0",
 235 |       "resolved": "https://registry.npmjs.org/bare-os/-/bare-os-2.2.0.tgz",
 236 |       "integrity": "sha512-hD0rOPfYWOMpVirTACt4/nK8mC55La12K5fY1ij8HAdfQakD62M+H4o4tpfKzVGLgRDTuk3vjA4GqGXXCeFbag==",
 237 |       "optional": true
 238 |     },
 239 |     "node_modules/bare-path": {
 240 |       "version": "2.1.0",
 241 |       "resolved": "https://registry.npmjs.org/bare-path/-/bare-path-2.1.0.tgz",
 242 |       "integrity": "sha512-DIIg7ts8bdRKwJRJrUMy/PICEaQZaPGZ26lsSx9MJSwIhSrcdHn7/C8W+XmnG/rKi6BaRcz+JO00CjZteybDtw==",
 243 |       "optional": true,
 244 |       "dependencies": {
 245 |         "bare-os": "^2.1.0"
 246 |       }
 247 |     },
 248 |     "node_modules/base64-js": {
 249 |       "version": "1.5.1",
 250 |       "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
 251 |       "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
 252 |       "funding": [
 253 |         {
 254 |           "type": "github",
 255 |           "url": "https://github.com/sponsors/feross"
 256 |         },
 257 |         {
 258 |           "type": "patreon",
 259 |           "url": "https://www.patreon.com/feross"
 260 |         },
 261 |         {
 262 |           "type": "consulting",
 263 |           "url": "https://feross.org/support"
 264 |         }
 265 |       ]
 266 |     },
 267 |     "node_modules/basic-auth": {
 268 |       "version": "2.0.1",
 269 |       "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz",
 270 |       "integrity": "sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==",
 271 |       "dependencies": {
 272 |         "safe-buffer": "5.1.2"
 273 |       },
 274 |       "engines": {
 275 |         "node": ">= 0.8"
 276 |       }
 277 |     },
 278 |     "node_modules/basic-ftp": {
 279 |       "version": "5.0.5",
 280 |       "resolved": "https://registry.npmjs.org/basic-ftp/-/basic-ftp-5.0.5.tgz",
 281 |       "integrity": "sha512-4Bcg1P8xhUuqcii/S0Z9wiHIrQVPMermM1any+MX5GeGD7faD3/msQUDGLol9wOcz4/jbg/WJnGqoJF6LiBdtg==",
 282 |       "engines": {
 283 |         "node": ">=10.0.0"
 284 |       }
 285 |     },
 286 |     "node_modules/buffer": {
 287 |       "version": "5.7.1",
 288 |       "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
 289 |       "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
 290 |       "funding": [
 291 |         {
 292 |           "type": "github",
 293 |           "url": "https://github.com/sponsors/feross"
 294 |         },
 295 |         {
 296 |           "type": "patreon",
 297 |           "url": "https://www.patreon.com/feross"
 298 |         },
 299 |         {
 300 |           "type": "consulting",
 301 |           "url": "https://feross.org/support"
 302 |         }
 303 |       ],
 304 |       "dependencies": {
 305 |         "base64-js": "^1.3.1",
 306 |         "ieee754": "^1.1.13"
 307 |       }
 308 |     },
 309 |     "node_modules/buffer-crc32": {
 310 |       "version": "0.2.13",
 311 |       "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz",
 312 |       "integrity": "sha512-VO9Ht/+p3SN7SKWqcrgEzjGbRSJYTx+Q1pTQC0wrWqHx0vpJraQ6GtHx8tvcg1rlK1byhU5gccxgOgj7B0TDkQ==",
 313 |       "engines": {
 314 |         "node": "*"
 315 |       }
 316 |     },
 317 |     "node_modules/bundle-name": {
 318 |       "version": "4.1.0",
 319 |       "resolved": "https://registry.npmjs.org/bundle-name/-/bundle-name-4.1.0.tgz",
 320 |       "integrity": "sha512-tjwM5exMg6BGRI+kNmTntNsvdZS1X8BFYS6tnJ2hdH0kVxM6/eVZ2xy+FqStSWvYmtfFMDLIxurorHwDKfDz5Q==",
 321 |       "dependencies": {
 322 |         "run-applescript": "^7.0.0"
 323 |       },
 324 |       "engines": {
 325 |         "node": ">=18"
 326 |       },
 327 |       "funding": {
 328 |         "url": "https://github.com/sponsors/sindresorhus"
 329 |       }
 330 |     },
 331 |     "node_modules/cacheable-lookup": {
 332 |       "version": "5.0.4",
 333 |       "resolved": "https://registry.npmjs.org/cacheable-lookup/-/cacheable-lookup-5.0.4.tgz",
 334 |       "integrity": "sha512-2/kNscPhpcxrOigMZzbiWF7dz8ilhb/nIHU3EyZiXWXpeq/au8qJ8VhdftMkty3n7Gj6HIGalQG8oiBNB3AJgA==",
 335 |       "engines": {
 336 |         "node": ">=10.6.0"
 337 |       }
 338 |     },
 339 |     "node_modules/cacheable-request": {
 340 |       "version": "7.0.4",
 341 |       "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-7.0.4.tgz",
 342 |       "integrity": "sha512-v+p6ongsrp0yTGbJXjgxPow2+DL93DASP4kXCDKb8/bwRtt9OEF3whggkkDkGNzgcWy2XaF4a8nZglC7uElscg==",
 343 |       "dependencies": {
 344 |         "clone-response": "^1.0.2",
 345 |         "get-stream": "^5.1.0",
 346 |         "http-cache-semantics": "^4.0.0",
 347 |         "keyv": "^4.0.0",
 348 |         "lowercase-keys": "^2.0.0",
 349 |         "normalize-url": "^6.0.1",
 350 |         "responselike": "^2.0.0"
 351 |       },
 352 |       "engines": {
 353 |         "node": ">=8"
 354 |       }
 355 |     },
 356 |     "node_modules/call-bind": {
 357 |       "version": "1.0.7",
 358 |       "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.7.tgz",
 359 |       "integrity": "sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==",
 360 |       "dependencies": {
 361 |         "es-define-property": "^1.0.0",
 362 |         "es-errors": "^1.3.0",
 363 |         "function-bind": "^1.1.2",
 364 |         "get-intrinsic": "^1.2.4",
 365 |         "set-function-length": "^1.2.1"
 366 |       },
 367 |       "engines": {
 368 |         "node": ">= 0.4"
 369 |       },
 370 |       "funding": {
 371 |         "url": "https://github.com/sponsors/ljharb"
 372 |       }
 373 |     },
 374 |     "node_modules/callsites": {
 375 |       "version": "3.1.0",
 376 |       "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
 377 |       "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
 378 |       "engines": {
 379 |         "node": ">=6"
 380 |       }
 381 |     },
 382 |     "node_modules/chalk": {
 383 |       "version": "2.4.2",
 384 |       "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
 385 |       "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
 386 |       "dependencies": {
 387 |         "ansi-styles": "^3.2.1",
 388 |         "escape-string-regexp": "^1.0.5",
 389 |         "supports-color": "^5.3.0"
 390 |       },
 391 |       "engines": {
 392 |         "node": ">=4"
 393 |       }
 394 |     },
 395 |     "node_modules/chromium-bidi": {
 396 |       "version": "0.5.10",
 397 |       "resolved": "https://registry.npmjs.org/chromium-bidi/-/chromium-bidi-0.5.10.tgz",
 398 |       "integrity": "sha512-4hsPE1VaLLM/sgNK/SlLbI24Ra7ZOuWAjA3rhw1lVCZ8ZiUgccS6cL5L/iqo4hjRcl5vwgYJ8xTtbXdulA9b6Q==",
 399 |       "dependencies": {
 400 |         "mitt": "3.0.1",
 401 |         "urlpattern-polyfill": "10.0.0"
 402 |       },
 403 |       "peerDependencies": {
 404 |         "devtools-protocol": "*"
 405 |       }
 406 |     },
 407 |     "node_modules/clean-stack": {
 408 |       "version": "2.2.0",
 409 |       "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-2.2.0.tgz",
 410 |       "integrity": "sha512-4diC9HaTE+KRAMWhDhrGOECgWZxoevMc5TlkObMqNSsVU62PYzXZ/SMTjzyGAFF1YusgxGcSWTEXBhp0CPwQ1A==",
 411 |       "engines": {
 412 |         "node": ">=6"
 413 |       }
 414 |     },
 415 |     "node_modules/cliui": {
 416 |       "version": "8.0.1",
 417 |       "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
 418 |       "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
 419 |       "dependencies": {
 420 |         "string-width": "^4.2.0",
 421 |         "strip-ansi": "^6.0.1",
 422 |         "wrap-ansi": "^7.0.0"
 423 |       },
 424 |       "engines": {
 425 |         "node": ">=12"
 426 |       }
 427 |     },
 428 |     "node_modules/clone-response": {
 429 |       "version": "1.0.3",
 430 |       "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.3.tgz",
 431 |       "integrity": "sha512-ROoL94jJH2dUVML2Y/5PEDNaSHgeOdSDicUyS7izcF63G6sTc/FTjLub4b8Il9S8S0beOfYt0TaA5qvFK+w0wA==",
 432 |       "dependencies": {
 433 |         "mimic-response": "^1.0.0"
 434 |       },
 435 |       "funding": {
 436 |         "url": "https://github.com/sponsors/sindresorhus"
 437 |       }
 438 |     },
 439 |     "node_modules/color-convert": {
 440 |       "version": "1.9.3",
 441 |       "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
 442 |       "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
 443 |       "dependencies": {
 444 |         "color-name": "1.1.3"
 445 |       }
 446 |     },
 447 |     "node_modules/color-name": {
 448 |       "version": "1.1.3",
 449 |       "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
 450 |       "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
 451 |     },
 452 |     "node_modules/corser": {
 453 |       "version": "2.0.1",
 454 |       "resolved": "https://registry.npmjs.org/corser/-/corser-2.0.1.tgz",
 455 |       "integrity": "sha512-utCYNzRSQIZNPIcGZdQc92UVJYAhtGAteCFg0yRaFm8f0P+CPtyGyHXJcGXnffjCybUCEx3FQ2G7U3/o9eIkVQ==",
 456 |       "engines": {
 457 |         "node": ">= 0.4.0"
 458 |       }
 459 |     },
 460 |     "node_modules/cosmiconfig": {
 461 |       "version": "9.0.0",
 462 |       "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-9.0.0.tgz",
 463 |       "integrity": "sha512-itvL5h8RETACmOTFc4UfIyB2RfEHi71Ax6E/PivVxq9NseKbOWpeyHEOIbmAw1rs8Ak0VursQNww7lf7YtUwzg==",
 464 |       "dependencies": {
 465 |         "env-paths": "^2.2.1",
 466 |         "import-fresh": "^3.3.0",
 467 |         "js-yaml": "^4.1.0",
 468 |         "parse-json": "^5.2.0"
 469 |       },
 470 |       "engines": {
 471 |         "node": ">=14"
 472 |       },
 473 |       "funding": {
 474 |         "url": "https://github.com/sponsors/d-fischer"
 475 |       },
 476 |       "peerDependencies": {
 477 |         "typescript": ">=4.9.5"
 478 |       },
 479 |       "peerDependenciesMeta": {
 480 |         "typescript": {
 481 |           "optional": true
 482 |         }
 483 |       }
 484 |     },
 485 |     "node_modules/cross-fetch": {
 486 |       "version": "4.0.0",
 487 |       "resolved": "https://registry.npmjs.org/cross-fetch/-/cross-fetch-4.0.0.tgz",
 488 |       "integrity": "sha512-e4a5N8lVvuLgAWgnCrLr2PP0YyDOTHa9H/Rj54dirp61qXnNq46m82bRhNqIA5VccJtWBvPTFRV3TtvHUKPB1g==",
 489 |       "dependencies": {
 490 |         "node-fetch": "^2.6.12"
 491 |       }
 492 |     },
 493 |     "node_modules/data-uri-to-buffer": {
 494 |       "version": "6.0.2",
 495 |       "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-6.0.2.tgz",
 496 |       "integrity": "sha512-7hvf7/GW8e86rW0ptuwS3OcBGDjIi6SZva7hCyWC0yYry2cOPmLIjXAUHI6DK2HsnwJd9ifmt57i8eV2n4YNpw==",
 497 |       "engines": {
 498 |         "node": ">= 14"
 499 |       }
 500 |     },
 501 |     "node_modules/debug": {
 502 |       "version": "4.3.4",
 503 |       "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
 504 |       "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
 505 |       "dependencies": {
 506 |         "ms": "2.1.2"
 507 |       },
 508 |       "engines": {
 509 |         "node": ">=6.0"
 510 |       },
 511 |       "peerDependenciesMeta": {
 512 |         "supports-color": {
 513 |           "optional": true
 514 |         }
 515 |       }
 516 |     },
 517 |     "node_modules/decompress-response": {
 518 |       "version": "6.0.0",
 519 |       "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-6.0.0.tgz",
 520 |       "integrity": "sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==",
 521 |       "dependencies": {
 522 |         "mimic-response": "^3.1.0"
 523 |       },
 524 |       "engines": {
 525 |         "node": ">=10"
 526 |       },
 527 |       "funding": {
 528 |         "url": "https://github.com/sponsors/sindresorhus"
 529 |       }
 530 |     },
 531 |     "node_modules/decompress-response/node_modules/mimic-response": {
 532 |       "version": "3.1.0",
 533 |       "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-3.1.0.tgz",
 534 |       "integrity": "sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==",
 535 |       "engines": {
 536 |         "node": ">=10"
 537 |       },
 538 |       "funding": {
 539 |         "url": "https://github.com/sponsors/sindresorhus"
 540 |       }
 541 |     },
 542 |     "node_modules/default-browser": {
 543 |       "version": "5.2.1",
 544 |       "resolved": "https://registry.npmjs.org/default-browser/-/default-browser-5.2.1.tgz",
 545 |       "integrity": "sha512-WY/3TUME0x3KPYdRRxEJJvXRHV4PyPoUsxtZa78lwItwRQRHhd2U9xOscaT/YTf8uCXIAjeJOFBVEh/7FtD8Xg==",
 546 |       "dependencies": {
 547 |         "bundle-name": "^4.1.0",
 548 |         "default-browser-id": "^5.0.0"
 549 |       },
 550 |       "engines": {
 551 |         "node": ">=18"
 552 |       },
 553 |       "funding": {
 554 |         "url": "https://github.com/sponsors/sindresorhus"
 555 |       }
 556 |     },
 557 |     "node_modules/default-browser-id": {
 558 |       "version": "5.0.0",
 559 |       "resolved": "https://registry.npmjs.org/default-browser-id/-/default-browser-id-5.0.0.tgz",
 560 |       "integrity": "sha512-A6p/pu/6fyBcA1TRz/GqWYPViplrftcW2gZC9q79ngNCKAeR/X3gcEdXQHl4KNXV+3wgIJ1CPkJQ3IHM6lcsyA==",
 561 |       "engines": {
 562 |         "node": ">=18"
 563 |       },
 564 |       "funding": {
 565 |         "url": "https://github.com/sponsors/sindresorhus"
 566 |       }
 567 |     },
 568 |     "node_modules/defer-to-connect": {
 569 |       "version": "2.0.1",
 570 |       "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-2.0.1.tgz",
 571 |       "integrity": "sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==",
 572 |       "engines": {
 573 |         "node": ">=10"
 574 |       }
 575 |     },
 576 |     "node_modules/define-data-property": {
 577 |       "version": "1.1.4",
 578 |       "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
 579 |       "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
 580 |       "dependencies": {
 581 |         "es-define-property": "^1.0.0",
 582 |         "es-errors": "^1.3.0",
 583 |         "gopd": "^1.0.1"
 584 |       },
 585 |       "engines": {
 586 |         "node": ">= 0.4"
 587 |       },
 588 |       "funding": {
 589 |         "url": "https://github.com/sponsors/ljharb"
 590 |       }
 591 |     },
 592 |     "node_modules/define-lazy-prop": {
 593 |       "version": "3.0.0",
 594 |       "resolved": "https://registry.npmjs.org/define-lazy-prop/-/define-lazy-prop-3.0.0.tgz",
 595 |       "integrity": "sha512-N+MeXYoqr3pOgn8xfyRPREN7gHakLYjhsHhWGT3fWAiL4IkAt0iDw14QiiEm2bE30c5XX5q0FtAA3CK5f9/BUg==",
 596 |       "engines": {
 597 |         "node": ">=12"
 598 |       },
 599 |       "funding": {
 600 |         "url": "https://github.com/sponsors/sindresorhus"
 601 |       }
 602 |     },
 603 |     "node_modules/degenerator": {
 604 |       "version": "5.0.1",
 605 |       "resolved": "https://registry.npmjs.org/degenerator/-/degenerator-5.0.1.tgz",
 606 |       "integrity": "sha512-TllpMR/t0M5sqCXfj85i4XaAzxmS5tVA16dqvdkMwGmzI+dXLXnw3J+3Vdv7VKw+ThlTMboK6i9rnZ6Nntj5CQ==",
 607 |       "dependencies": {
 608 |         "ast-types": "^0.13.4",
 609 |         "escodegen": "^2.1.0",
 610 |         "esprima": "^4.0.1"
 611 |       },
 612 |       "engines": {
 613 |         "node": ">= 14"
 614 |       }
 615 |     },
 616 |     "node_modules/devtools-protocol": {
 617 |       "version": "0.0.1249869",
 618 |       "resolved": "https://registry.npmjs.org/devtools-protocol/-/devtools-protocol-0.0.1249869.tgz",
 619 |       "integrity": "sha512-Ctp4hInA0BEavlUoRy9mhGq0i+JSo/AwVyX2EFgZmV1kYB+Zq+EMBAn52QWu6FbRr10hRb6pBl420upbp4++vg=="
 620 |     },
 621 |     "node_modules/emoji-regex": {
 622 |       "version": "8.0.0",
 623 |       "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
 624 |       "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
 625 |     },
 626 |     "node_modules/end-of-stream": {
 627 |       "version": "1.4.4",
 628 |       "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
 629 |       "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
 630 |       "dependencies": {
 631 |         "once": "^1.4.0"
 632 |       }
 633 |     },
 634 |     "node_modules/env-paths": {
 635 |       "version": "2.2.1",
 636 |       "resolved": "https://registry.npmjs.org/env-paths/-/env-paths-2.2.1.tgz",
 637 |       "integrity": "sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==",
 638 |       "engines": {
 639 |         "node": ">=6"
 640 |       }
 641 |     },
 642 |     "node_modules/error-ex": {
 643 |       "version": "1.3.2",
 644 |       "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
 645 |       "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
 646 |       "dependencies": {
 647 |         "is-arrayish": "^0.2.1"
 648 |       }
 649 |     },
 650 |     "node_modules/es-define-property": {
 651 |       "version": "1.0.0",
 652 |       "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.0.tgz",
 653 |       "integrity": "sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==",
 654 |       "dependencies": {
 655 |         "get-intrinsic": "^1.2.4"
 656 |       },
 657 |       "engines": {
 658 |         "node": ">= 0.4"
 659 |       }
 660 |     },
 661 |     "node_modules/es-errors": {
 662 |       "version": "1.3.0",
 663 |       "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
 664 |       "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
 665 |       "engines": {
 666 |         "node": ">= 0.4"
 667 |       }
 668 |     },
 669 |     "node_modules/escalade": {
 670 |       "version": "3.1.2",
 671 |       "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.2.tgz",
 672 |       "integrity": "sha512-ErCHMCae19vR8vQGe50xIsVomy19rg6gFu3+r3jkEO46suLMWBksvVyoGgQV+jOfl84ZSOSlmv6Gxa89PmTGmA==",
 673 |       "engines": {
 674 |         "node": ">=6"
 675 |       }
 676 |     },
 677 |     "node_modules/escape-string-regexp": {
 678 |       "version": "1.0.5",
 679 |       "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
 680 |       "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
 681 |       "engines": {
 682 |         "node": ">=0.8.0"
 683 |       }
 684 |     },
 685 |     "node_modules/escodegen": {
 686 |       "version": "2.1.0",
 687 |       "resolved": "https://registry.npmjs.org/escodegen/-/escodegen-2.1.0.tgz",
 688 |       "integrity": "sha512-2NlIDTwUWJN0mRPQOdtQBzbUHvdGY2P1VXSyU83Q3xKxM7WHX2Ql8dKq782Q9TgQUNOLEzEYu9bzLNj1q88I5w==",
 689 |       "dependencies": {
 690 |         "esprima": "^4.0.1",
 691 |         "estraverse": "^5.2.0",
 692 |         "esutils": "^2.0.2"
 693 |       },
 694 |       "bin": {
 695 |         "escodegen": "bin/escodegen.js",
 696 |         "esgenerate": "bin/esgenerate.js"
 697 |       },
 698 |       "engines": {
 699 |         "node": ">=6.0"
 700 |       },
 701 |       "optionalDependencies": {
 702 |         "source-map": "~0.6.1"
 703 |       }
 704 |     },
 705 |     "node_modules/esprima": {
 706 |       "version": "4.0.1",
 707 |       "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
 708 |       "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
 709 |       "bin": {
 710 |         "esparse": "bin/esparse.js",
 711 |         "esvalidate": "bin/esvalidate.js"
 712 |       },
 713 |       "engines": {
 714 |         "node": ">=4"
 715 |       }
 716 |     },
 717 |     "node_modules/estraverse": {
 718 |       "version": "5.3.0",
 719 |       "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
 720 |       "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
 721 |       "engines": {
 722 |         "node": ">=4.0"
 723 |       }
 724 |     },
 725 |     "node_modules/esutils": {
 726 |       "version": "2.0.3",
 727 |       "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
 728 |       "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
 729 |       "engines": {
 730 |         "node": ">=0.10.0"
 731 |       }
 732 |     },
 733 |     "node_modules/eventemitter3": {
 734 |       "version": "4.0.7",
 735 |       "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
 736 |       "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
 737 |     },
 738 |     "node_modules/extract-zip": {
 739 |       "version": "2.0.1",
 740 |       "resolved": "https://registry.npmjs.org/extract-zip/-/extract-zip-2.0.1.tgz",
 741 |       "integrity": "sha512-GDhU9ntwuKyGXdZBUgTIe+vXnWj0fppUEtMDL0+idd5Sta8TGpHssn/eusA9mrPr9qNDym6SxAYZjNvCn/9RBg==",
 742 |       "dependencies": {
 743 |         "debug": "^4.1.1",
 744 |         "get-stream": "^5.1.0",
 745 |         "yauzl": "^2.10.0"
 746 |       },
 747 |       "bin": {
 748 |         "extract-zip": "cli.js"
 749 |       },
 750 |       "engines": {
 751 |         "node": ">= 10.17.0"
 752 |       },
 753 |       "optionalDependencies": {
 754 |         "@types/yauzl": "^2.9.1"
 755 |       }
 756 |     },
 757 |     "node_modules/fast-fifo": {
 758 |       "version": "1.3.2",
 759 |       "resolved": "https://registry.npmjs.org/fast-fifo/-/fast-fifo-1.3.2.tgz",
 760 |       "integrity": "sha512-/d9sfos4yxzpwkDkuN7k2SqFKtYNmCTzgfEpz82x34IM9/zc8KGxQoXg1liNC/izpRM/MBdt44Nmx41ZWqk+FQ=="
 761 |     },
 762 |     "node_modules/fd-slicer": {
 763 |       "version": "1.1.0",
 764 |       "resolved": "https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.1.0.tgz",
 765 |       "integrity": "sha512-cE1qsB/VwyQozZ+q1dGxR8LBYNZeofhEdUNGSMbQD3Gw2lAzX9Zb3uIU6Ebc/Fmyjo9AWWfnn0AUCHqtevs/8g==",
 766 |       "dependencies": {
 767 |         "pend": "~1.2.0"
 768 |       }
 769 |     },
 770 |     "node_modules/follow-redirects": {
 771 |       "version": "1.15.5",
 772 |       "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.5.tgz",
 773 |       "integrity": "sha512-vSFWUON1B+yAw1VN4xMfxgn5fTUiaOzAJCKBwIIgT/+7CuGy9+r+5gITvP62j3RmaD5Ph65UaERdOSRGUzZtgw==",
 774 |       "funding": [
 775 |         {
 776 |           "type": "individual",
 777 |           "url": "https://github.com/sponsors/RubenVerborgh"
 778 |         }
 779 |       ],
 780 |       "engines": {
 781 |         "node": ">=4.0"
 782 |       },
 783 |       "peerDependenciesMeta": {
 784 |         "debug": {
 785 |           "optional": true
 786 |         }
 787 |       }
 788 |     },
 789 |     "node_modules/fs-extra": {
 790 |       "version": "11.2.0",
 791 |       "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.2.0.tgz",
 792 |       "integrity": "sha512-PmDi3uwK5nFuXh7XDTlVnS17xJS7vW36is2+w3xcv8SVxiB4NyATf4ctkVY5bkSjX0Y4nbvZCq1/EjtEyr9ktw==",
 793 |       "dependencies": {
 794 |         "graceful-fs": "^4.2.0",
 795 |         "jsonfile": "^6.0.1",
 796 |         "universalify": "^2.0.0"
 797 |       },
 798 |       "engines": {
 799 |         "node": ">=14.14"
 800 |       }
 801 |     },
 802 |     "node_modules/function-bind": {
 803 |       "version": "1.1.2",
 804 |       "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
 805 |       "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
 806 |       "funding": {
 807 |         "url": "https://github.com/sponsors/ljharb"
 808 |       }
 809 |     },
 810 |     "node_modules/get-caller-file": {
 811 |       "version": "2.0.5",
 812 |       "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
 813 |       "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
 814 |       "engines": {
 815 |         "node": "6.* || 8.* || >= 10.*"
 816 |       }
 817 |     },
 818 |     "node_modules/get-intrinsic": {
 819 |       "version": "1.2.4",
 820 |       "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.4.tgz",
 821 |       "integrity": "sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==",
 822 |       "dependencies": {
 823 |         "es-errors": "^1.3.0",
 824 |         "function-bind": "^1.1.2",
 825 |         "has-proto": "^1.0.1",
 826 |         "has-symbols": "^1.0.3",
 827 |         "hasown": "^2.0.0"
 828 |       },
 829 |       "engines": {
 830 |         "node": ">= 0.4"
 831 |       },
 832 |       "funding": {
 833 |         "url": "https://github.com/sponsors/ljharb"
 834 |       }
 835 |     },
 836 |     "node_modules/get-stream": {
 837 |       "version": "5.2.0",
 838 |       "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
 839 |       "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
 840 |       "dependencies": {
 841 |         "pump": "^3.0.0"
 842 |       },
 843 |       "engines": {
 844 |         "node": ">=8"
 845 |       },
 846 |       "funding": {
 847 |         "url": "https://github.com/sponsors/sindresorhus"
 848 |       }
 849 |     },
 850 |     "node_modules/get-uri": {
 851 |       "version": "6.0.3",
 852 |       "resolved": "https://registry.npmjs.org/get-uri/-/get-uri-6.0.3.tgz",
 853 |       "integrity": "sha512-BzUrJBS9EcUb4cFol8r4W3v1cPsSyajLSthNkz5BxbpDcHN5tIrM10E2eNvfnvBn3DaT3DUgx0OpsBKkaOpanw==",
 854 |       "dependencies": {
 855 |         "basic-ftp": "^5.0.2",
 856 |         "data-uri-to-buffer": "^6.0.2",
 857 |         "debug": "^4.3.4",
 858 |         "fs-extra": "^11.2.0"
 859 |       },
 860 |       "engines": {
 861 |         "node": ">= 14"
 862 |       }
 863 |     },
 864 |     "node_modules/gopd": {
 865 |       "version": "1.0.1",
 866 |       "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz",
 867 |       "integrity": "sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==",
 868 |       "dependencies": {
 869 |         "get-intrinsic": "^1.1.3"
 870 |       },
 871 |       "funding": {
 872 |         "url": "https://github.com/sponsors/ljharb"
 873 |       }
 874 |     },
 875 |     "node_modules/got": {
 876 |       "version": "11.8.6",
 877 |       "resolved": "https://registry.npmjs.org/got/-/got-11.8.6.tgz",
 878 |       "integrity": "sha512-6tfZ91bOr7bOXnK7PRDCGBLa1H4U080YHNaAQ2KsMGlLEzRbk44nsZF2E1IeRc3vtJHPVbKCYgdFbaGO2ljd8g==",
 879 |       "dependencies": {
 880 |         "@sindresorhus/is": "^4.0.0",
 881 |         "@szmarczak/http-timer": "^4.0.5",
 882 |         "@types/cacheable-request": "^6.0.1",
 883 |         "@types/responselike": "^1.0.0",
 884 |         "cacheable-lookup": "^5.0.3",
 885 |         "cacheable-request": "^7.0.2",
 886 |         "decompress-response": "^6.0.0",
 887 |         "http2-wrapper": "^1.0.0-beta.5.2",
 888 |         "lowercase-keys": "^2.0.0",
 889 |         "p-cancelable": "^2.0.0",
 890 |         "responselike": "^2.0.0"
 891 |       },
 892 |       "engines": {
 893 |         "node": ">=10.19.0"
 894 |       },
 895 |       "funding": {
 896 |         "url": "https://github.com/sindresorhus/got?sponsor=1"
 897 |       }
 898 |     },
 899 |     "node_modules/graceful-fs": {
 900 |       "version": "4.2.11",
 901 |       "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
 902 |       "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="
 903 |     },
 904 |     "node_modules/has-flag": {
 905 |       "version": "3.0.0",
 906 |       "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
 907 |       "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
 908 |       "engines": {
 909 |         "node": ">=4"
 910 |       }
 911 |     },
 912 |     "node_modules/has-property-descriptors": {
 913 |       "version": "1.0.2",
 914 |       "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
 915 |       "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
 916 |       "dependencies": {
 917 |         "es-define-property": "^1.0.0"
 918 |       },
 919 |       "funding": {
 920 |         "url": "https://github.com/sponsors/ljharb"
 921 |       }
 922 |     },
 923 |     "node_modules/has-proto": {
 924 |       "version": "1.0.3",
 925 |       "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.3.tgz",
 926 |       "integrity": "sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==",
 927 |       "engines": {
 928 |         "node": ">= 0.4"
 929 |       },
 930 |       "funding": {
 931 |         "url": "https://github.com/sponsors/ljharb"
 932 |       }
 933 |     },
 934 |     "node_modules/has-symbols": {
 935 |       "version": "1.0.3",
 936 |       "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
 937 |       "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
 938 |       "engines": {
 939 |         "node": ">= 0.4"
 940 |       },
 941 |       "funding": {
 942 |         "url": "https://github.com/sponsors/ljharb"
 943 |       }
 944 |     },
 945 |     "node_modules/hasown": {
 946 |       "version": "2.0.1",
 947 |       "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.1.tgz",
 948 |       "integrity": "sha512-1/th4MHjnwncwXsIW6QMzlvYL9kG5e/CpVvLRZe4XPa8TOUNbCELqmvhDmnkNsAjwaG4+I8gJJL0JBvTTLO9qA==",
 949 |       "dependencies": {
 950 |         "function-bind": "^1.1.2"
 951 |       },
 952 |       "engines": {
 953 |         "node": ">= 0.4"
 954 |       }
 955 |     },
 956 |     "node_modules/he": {
 957 |       "version": "1.2.0",
 958 |       "resolved": "https://registry.npmjs.org/he/-/he-1.2.0.tgz",
 959 |       "integrity": "sha512-F/1DnUGPopORZi0ni+CvrCgHQ5FyEAHRLSApuYWMmrbSwoN2Mn/7k+Gl38gJnR7yyDZk6WLXwiGod1JOWNDKGw==",
 960 |       "bin": {
 961 |         "he": "bin/he"
 962 |       }
 963 |     },
 964 |     "node_modules/html-encoding-sniffer": {
 965 |       "version": "3.0.0",
 966 |       "resolved": "https://registry.npmjs.org/html-encoding-sniffer/-/html-encoding-sniffer-3.0.0.tgz",
 967 |       "integrity": "sha512-oWv4T4yJ52iKrufjnyZPkrN0CH3QnrUqdB6In1g5Fe1mia8GmF36gnfNySxoZtxD5+NmYw1EElVXiBk93UeskA==",
 968 |       "dependencies": {
 969 |         "whatwg-encoding": "^2.0.0"
 970 |       },
 971 |       "engines": {
 972 |         "node": ">=12"
 973 |       }
 974 |     },
 975 |     "node_modules/http-cache-semantics": {
 976 |       "version": "4.1.1",
 977 |       "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.1.1.tgz",
 978 |       "integrity": "sha512-er295DKPVsV82j5kw1Gjt+ADA/XYHsajl82cGNQG2eyoPkvgUhX+nDIyelzhIWbbsXP39EHcI6l5tYs2FYqYXQ=="
 979 |     },
 980 |     "node_modules/http-proxy": {
 981 |       "version": "1.18.1",
 982 |       "resolved": "https://registry.npmjs.org/http-proxy/-/http-proxy-1.18.1.tgz",
 983 |       "integrity": "sha512-7mz/721AbnJwIVbnaSv1Cz3Am0ZLT/UBwkC92VlxhXv/k/BBQfM2fXElQNC27BVGr0uwUpplYPQM9LnaBMR5NQ==",
 984 |       "dependencies": {
 985 |         "eventemitter3": "^4.0.0",
 986 |         "follow-redirects": "^1.0.0",
 987 |         "requires-port": "^1.0.0"
 988 |       },
 989 |       "engines": {
 990 |         "node": ">=8.0.0"
 991 |       }
 992 |     },
 993 |     "node_modules/http-proxy-agent": {
 994 |       "version": "7.0.2",
 995 |       "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz",
 996 |       "integrity": "sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==",
 997 |       "dependencies": {
 998 |         "agent-base": "^7.1.0",
 999 |         "debug": "^4.3.4"
1000 |       },
1001 |       "engines": {
1002 |         "node": ">= 14"
1003 |       }
1004 |     },
1005 |     "node_modules/http-server": {
1006 |       "version": "14.1.1",
1007 |       "resolved": "https://registry.npmjs.org/http-server/-/http-server-14.1.1.tgz",
1008 |       "integrity": "sha512-+cbxadF40UXd9T01zUHgA+rlo2Bg1Srer4+B4NwIHdaGxAGGv59nYRnGGDJ9LBk7alpS0US+J+bLLdQOOkJq4A==",
1009 |       "dependencies": {
1010 |         "basic-auth": "^2.0.1",
1011 |         "chalk": "^4.1.2",
1012 |         "corser": "^2.0.1",
1013 |         "he": "^1.2.0",
1014 |         "html-encoding-sniffer": "^3.0.0",
1015 |         "http-proxy": "^1.18.1",
1016 |         "mime": "^1.6.0",
1017 |         "minimist": "^1.2.6",
1018 |         "opener": "^1.5.1",
1019 |         "portfinder": "^1.0.28",
1020 |         "secure-compare": "3.0.1",
1021 |         "union": "~0.5.0",
1022 |         "url-join": "^4.0.1"
1023 |       },
1024 |       "bin": {
1025 |         "http-server": "bin/http-server"
1026 |       },
1027 |       "engines": {
1028 |         "node": ">=12"
1029 |       }
1030 |     },
1031 |     "node_modules/http-server/node_modules/ansi-styles": {
1032 |       "version": "4.3.0",
1033 |       "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
1034 |       "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
1035 |       "dependencies": {
1036 |         "color-convert": "^2.0.1"
1037 |       },
1038 |       "engines": {
1039 |         "node": ">=8"
1040 |       },
1041 |       "funding": {
1042 |         "url": "https://github.com/chalk/ansi-styles?sponsor=1"
1043 |       }
1044 |     },
1045 |     "node_modules/http-server/node_modules/chalk": {
1046 |       "version": "4.1.2",
1047 |       "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
1048 |       "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
1049 |       "dependencies": {
1050 |         "ansi-styles": "^4.1.0",
1051 |         "supports-color": "^7.1.0"
1052 |       },
1053 |       "engines": {
1054 |         "node": ">=10"
1055 |       },
1056 |       "funding": {
1057 |         "url": "https://github.com/chalk/chalk?sponsor=1"
1058 |       }
1059 |     },
1060 |     "node_modules/http-server/node_modules/color-convert": {
1061 |       "version": "2.0.1",
1062 |       "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
1063 |       "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
1064 |       "dependencies": {
1065 |         "color-name": "~1.1.4"
1066 |       },
1067 |       "engines": {
1068 |         "node": ">=7.0.0"
1069 |       }
1070 |     },
1071 |     "node_modules/http-server/node_modules/color-name": {
1072 |       "version": "1.1.4",
1073 |       "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
1074 |       "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
1075 |     },
1076 |     "node_modules/http-server/node_modules/has-flag": {
1077 |       "version": "4.0.0",
1078 |       "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
1079 |       "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
1080 |       "engines": {
1081 |         "node": ">=8"
1082 |       }
1083 |     },
1084 |     "node_modules/http-server/node_modules/supports-color": {
1085 |       "version": "7.2.0",
1086 |       "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
1087 |       "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
1088 |       "dependencies": {
1089 |         "has-flag": "^4.0.0"
1090 |       },
1091 |       "engines": {
1092 |         "node": ">=8"
1093 |       }
1094 |     },
1095 |     "node_modules/http2-wrapper": {
1096 |       "version": "1.0.3",
1097 |       "resolved": "https://registry.npmjs.org/http2-wrapper/-/http2-wrapper-1.0.3.tgz",
1098 |       "integrity": "sha512-V+23sDMr12Wnz7iTcDeJr3O6AIxlnvT/bmaAAAP/Xda35C90p9599p0F1eHR/N1KILWSoWVAiOMFjBBXaXSMxg==",
1099 |       "dependencies": {
1100 |         "quick-lru": "^5.1.1",
1101 |         "resolve-alpn": "^1.0.0"
1102 |       },
1103 |       "engines": {
1104 |         "node": ">=10.19.0"
1105 |       }
1106 |     },
1107 |     "node_modules/https-proxy-agent": {
1108 |       "version": "7.0.4",
1109 |       "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.4.tgz",
1110 |       "integrity": "sha512-wlwpilI7YdjSkWaQ/7omYBMTliDcmCN8OLihO6I9B86g06lMyAoqgoDpV0XqoaPOKj+0DIdAvnsWfyAAhmimcg==",
1111 |       "dependencies": {
1112 |         "agent-base": "^7.0.2",
1113 |         "debug": "4"
1114 |       },
1115 |       "engines": {
1116 |         "node": ">= 14"
1117 |       }
1118 |     },
1119 |     "node_modules/iconv-lite": {
1120 |       "version": "0.6.3",
1121 |       "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
1122 |       "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
1123 |       "dependencies": {
1124 |         "safer-buffer": ">= 2.1.2 < 3.0.0"
1125 |       },
1126 |       "engines": {
1127 |         "node": ">=0.10.0"
1128 |       }
1129 |     },
1130 |     "node_modules/ieee754": {
1131 |       "version": "1.2.1",
1132 |       "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
1133 |       "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
1134 |       "funding": [
1135 |         {
1136 |           "type": "github",
1137 |           "url": "https://github.com/sponsors/feross"
1138 |         },
1139 |         {
1140 |           "type": "patreon",
1141 |           "url": "https://www.patreon.com/feross"
1142 |         },
1143 |         {
1144 |           "type": "consulting",
1145 |           "url": "https://feross.org/support"
1146 |         }
1147 |       ]
1148 |     },
1149 |     "node_modules/import-fresh": {
1150 |       "version": "3.3.0",
1151 |       "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
1152 |       "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
1153 |       "dependencies": {
1154 |         "parent-module": "^1.0.0",
1155 |         "resolve-from": "^4.0.0"
1156 |       },
1157 |       "engines": {
1158 |         "node": ">=6"
1159 |       },
1160 |       "funding": {
1161 |         "url": "https://github.com/sponsors/sindresorhus"
1162 |       }
1163 |     },
1164 |     "node_modules/indent-string": {
1165 |       "version": "4.0.0",
1166 |       "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
1167 |       "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
1168 |       "engines": {
1169 |         "node": ">=8"
1170 |       }
1171 |     },
1172 |     "node_modules/ip-address": {
1173 |       "version": "9.0.5",
1174 |       "resolved": "https://registry.npmjs.org/ip-address/-/ip-address-9.0.5.tgz",
1175 |       "integrity": "sha512-zHtQzGojZXTwZTHQqra+ETKd4Sn3vgi7uBmlPoXVWZqYvuKmtI0l/VZTjqGmJY9x88GGOaZ9+G9ES8hC4T4X8g==",
1176 |       "dependencies": {
1177 |         "jsbn": "1.1.0",
1178 |         "sprintf-js": "^1.1.3"
1179 |       },
1180 |       "engines": {
1181 |         "node": ">= 12"
1182 |       }
1183 |     },
1184 |     "node_modules/is-arrayish": {
1185 |       "version": "0.2.1",
1186 |       "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
1187 |       "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg=="
1188 |     },
1189 |     "node_modules/is-docker": {
1190 |       "version": "3.0.0",
1191 |       "resolved": "https://registry.npmjs.org/is-docker/-/is-docker-3.0.0.tgz",
1192 |       "integrity": "sha512-eljcgEDlEns/7AXFosB5K/2nCM4P7FQPkGc/DWLy5rmFEWvZayGrik1d9/QIY5nJ4f9YsVvBkA6kJpHn9rISdQ==",
1193 |       "bin": {
1194 |         "is-docker": "cli.js"
1195 |       },
1196 |       "engines": {
1197 |         "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
1198 |       },
1199 |       "funding": {
1200 |         "url": "https://github.com/sponsors/sindresorhus"
1201 |       }
1202 |     },
1203 |     "node_modules/is-fullwidth-code-point": {
1204 |       "version": "3.0.0",
1205 |       "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
1206 |       "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
1207 |       "engines": {
1208 |         "node": ">=8"
1209 |       }
1210 |     },
1211 |     "node_modules/is-inside-container": {
1212 |       "version": "1.0.0",
1213 |       "resolved": "https://registry.npmjs.org/is-inside-container/-/is-inside-container-1.0.0.tgz",
1214 |       "integrity": "sha512-KIYLCCJghfHZxqjYBE7rEy0OBuTd5xCHS7tHVgvCLkx7StIoaxwNW3hCALgEUjFfeRk+MG/Qxmp/vtETEF3tRA==",
1215 |       "dependencies": {
1216 |         "is-docker": "^3.0.0"
1217 |       },
1218 |       "bin": {
1219 |         "is-inside-container": "cli.js"
1220 |       },
1221 |       "engines": {
1222 |         "node": ">=14.16"
1223 |       },
1224 |       "funding": {
1225 |         "url": "https://github.com/sponsors/sindresorhus"
1226 |       }
1227 |     },
1228 |     "node_modules/is-port-reachable": {
1229 |       "version": "3.1.0",
1230 |       "resolved": "https://registry.npmjs.org/is-port-reachable/-/is-port-reachable-3.1.0.tgz",
1231 |       "integrity": "sha512-vjc0SSRNZ32s9SbZBzGaiP6YVB+xglLShhgZD/FHMZUXBvQWaV9CtzgeVhjccFJrI6RAMV+LX7NYxueW/A8W5A==",
1232 |       "engines": {
1233 |         "node": ">=8"
1234 |       }
1235 |     },
1236 |     "node_modules/is-reachable": {
1237 |       "version": "5.2.1",
1238 |       "resolved": "https://registry.npmjs.org/is-reachable/-/is-reachable-5.2.1.tgz",
1239 |       "integrity": "sha512-ViPrrlmt9FTTclYbz6mL/PFyF1TXSpJ9y/zw9QMVJxbhU/7DFkvk/5cTv7S0sXtqbJj32zZ+jKpNAjrYTUZBPQ==",
1240 |       "dependencies": {
1241 |         "arrify": "^2.0.1",
1242 |         "got": "^11.7.0",
1243 |         "is-port-reachable": "^3.0.0",
1244 |         "p-any": "^3.0.0",
1245 |         "p-timeout": "^3.2.0",
1246 |         "prepend-http": "^3.0.1",
1247 |         "router-ips": "^1.0.0",
1248 |         "url-parse": "^1.5.10"
1249 |       },
1250 |       "engines": {
1251 |         "node": ">=10"
1252 |       },
1253 |       "funding": {
1254 |         "url": "https://github.com/sponsors/sindresorhus"
1255 |       }
1256 |     },
1257 |     "node_modules/is-wsl": {
1258 |       "version": "3.1.0",
1259 |       "resolved": "https://registry.npmjs.org/is-wsl/-/is-wsl-3.1.0.tgz",
1260 |       "integrity": "sha512-UcVfVfaK4Sc4m7X3dUSoHoozQGBEFeDC+zVo06t98xe8CzHSZZBekNXH+tu0NalHolcJ/QAGqS46Hef7QXBIMw==",
1261 |       "dependencies": {
1262 |         "is-inside-container": "^1.0.0"
1263 |       },
1264 |       "engines": {
1265 |         "node": ">=16"
1266 |       },
1267 |       "funding": {
1268 |         "url": "https://github.com/sponsors/sindresorhus"
1269 |       }
1270 |     },
1271 |     "node_modules/js-tokens": {
1272 |       "version": "4.0.0",
1273 |       "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
1274 |       "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
1275 |     },
1276 |     "node_modules/js-yaml": {
1277 |       "version": "4.1.0",
1278 |       "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
1279 |       "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
1280 |       "dependencies": {
1281 |         "argparse": "^2.0.1"
1282 |       },
1283 |       "bin": {
1284 |         "js-yaml": "bin/js-yaml.js"
1285 |       }
1286 |     },
1287 |     "node_modules/jsbn": {
1288 |       "version": "1.1.0",
1289 |       "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-1.1.0.tgz",
1290 |       "integrity": "sha512-4bYVV3aAMtDTTu4+xsDYa6sy9GyJ69/amsu9sYF2zqjiEoZA5xJi3BrfX3uY+/IekIu7MwdObdbDWpoZdBv3/A=="
1291 |     },
1292 |     "node_modules/json-buffer": {
1293 |       "version": "3.0.1",
1294 |       "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
1295 |       "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ=="
1296 |     },
1297 |     "node_modules/json-parse-even-better-errors": {
1298 |       "version": "2.3.1",
1299 |       "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
1300 |       "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w=="
1301 |     },
1302 |     "node_modules/jsonfile": {
1303 |       "version": "6.1.0",
1304 |       "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
1305 |       "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
1306 |       "dependencies": {
1307 |         "universalify": "^2.0.0"
1308 |       },
1309 |       "optionalDependencies": {
1310 |         "graceful-fs": "^4.1.6"
1311 |       }
1312 |     },
1313 |     "node_modules/keyv": {
1314 |       "version": "4.5.4",
1315 |       "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
1316 |       "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
1317 |       "dependencies": {
1318 |         "json-buffer": "3.0.1"
1319 |       }
1320 |     },
1321 |     "node_modules/lines-and-columns": {
1322 |       "version": "1.2.4",
1323 |       "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
1324 |       "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg=="
1325 |     },
1326 |     "node_modules/lodash": {
1327 |       "version": "4.17.21",
1328 |       "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
1329 |       "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
1330 |     },
1331 |     "node_modules/lowercase-keys": {
1332 |       "version": "2.0.0",
1333 |       "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
1334 |       "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==",
1335 |       "engines": {
1336 |         "node": ">=8"
1337 |       }
1338 |     },
1339 |     "node_modules/lru-cache": {
1340 |       "version": "7.18.3",
1341 |       "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-7.18.3.tgz",
1342 |       "integrity": "sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==",
1343 |       "engines": {
1344 |         "node": ">=12"
1345 |       }
1346 |     },
1347 |     "node_modules/mime": {
1348 |       "version": "1.6.0",
1349 |       "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
1350 |       "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
1351 |       "bin": {
1352 |         "mime": "cli.js"
1353 |       },
1354 |       "engines": {
1355 |         "node": ">=4"
1356 |       }
1357 |     },
1358 |     "node_modules/mimic-response": {
1359 |       "version": "1.0.1",
1360 |       "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
1361 |       "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==",
1362 |       "engines": {
1363 |         "node": ">=4"
1364 |       }
1365 |     },
1366 |     "node_modules/minimist": {
1367 |       "version": "1.2.8",
1368 |       "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
1369 |       "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
1370 |       "funding": {
1371 |         "url": "https://github.com/sponsors/ljharb"
1372 |       }
1373 |     },
1374 |     "node_modules/mitt": {
1375 |       "version": "3.0.1",
1376 |       "resolved": "https://registry.npmjs.org/mitt/-/mitt-3.0.1.tgz",
1377 |       "integrity": "sha512-vKivATfr97l2/QBCYAkXYDbrIWPM2IIKEl7YPhjCvKlG3kE2gm+uBo6nEXK3M5/Ffh/FLpKExzOQ3JJoJGFKBw=="
1378 |     },
1379 |     "node_modules/mkdirp": {
1380 |       "version": "0.5.6",
1381 |       "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
1382 |       "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
1383 |       "dependencies": {
1384 |         "minimist": "^1.2.6"
1385 |       },
1386 |       "bin": {
1387 |         "mkdirp": "bin/cmd.js"
1388 |       }
1389 |     },
1390 |     "node_modules/ms": {
1391 |       "version": "2.1.2",
1392 |       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
1393 |       "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
1394 |     },
1395 |     "node_modules/netmask": {
1396 |       "version": "2.0.2",
1397 |       "resolved": "https://registry.npmjs.org/netmask/-/netmask-2.0.2.tgz",
1398 |       "integrity": "sha512-dBpDMdxv9Irdq66304OLfEmQ9tbNRFnFTuZiLo+bD+r332bBmMJ8GBLXklIXXgxd3+v9+KUnZaUR5PJMa75Gsg==",
1399 |       "engines": {
1400 |         "node": ">= 0.4.0"
1401 |       }
1402 |     },
1403 |     "node_modules/node-fetch": {
1404 |       "version": "2.7.0",
1405 |       "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
1406 |       "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
1407 |       "dependencies": {
1408 |         "whatwg-url": "^5.0.0"
1409 |       },
1410 |       "engines": {
1411 |         "node": "4.x || >=6.0.0"
1412 |       },
1413 |       "peerDependencies": {
1414 |         "encoding": "^0.1.0"
1415 |       },
1416 |       "peerDependenciesMeta": {
1417 |         "encoding": {
1418 |           "optional": true
1419 |         }
1420 |       }
1421 |     },
1422 |     "node_modules/normalize-url": {
1423 |       "version": "6.1.0",
1424 |       "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-6.1.0.tgz",
1425 |       "integrity": "sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==",
1426 |       "engines": {
1427 |         "node": ">=10"
1428 |       },
1429 |       "funding": {
1430 |         "url": "https://github.com/sponsors/sindresorhus"
1431 |       }
1432 |     },
1433 |     "node_modules/object-inspect": {
1434 |       "version": "1.13.1",
1435 |       "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.1.tgz",
1436 |       "integrity": "sha512-5qoj1RUiKOMsCCNLV1CBiPYE10sziTsnmNxkAI/rZhiD63CF7IqdFGC/XzjWjpSgLf0LxXX3bDFIh0E18f6UhQ==",
1437 |       "funding": {
1438 |         "url": "https://github.com/sponsors/ljharb"
1439 |       }
1440 |     },
1441 |     "node_modules/once": {
1442 |       "version": "1.4.0",
1443 |       "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
1444 |       "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
1445 |       "dependencies": {
1446 |         "wrappy": "1"
1447 |       }
1448 |     },
1449 |     "node_modules/open": {
1450 |       "version": "10.0.4",
1451 |       "resolved": "https://registry.npmjs.org/open/-/open-10.0.4.tgz",
1452 |       "integrity": "sha512-oujJ/FFr7ra6/7gJuQ4ZJJ8Gf2VHM0J3J/W7IvH++zaqEzacWVxzK++NiVY5NLHTTj7u/jNH5H3Ei9biL31Lng==",
1453 |       "dependencies": {
1454 |         "default-browser": "^5.2.1",
1455 |         "define-lazy-prop": "^3.0.0",
1456 |         "is-inside-container": "^1.0.0",
1457 |         "is-wsl": "^3.1.0"
1458 |       },
1459 |       "engines": {
1460 |         "node": ">=18"
1461 |       },
1462 |       "funding": {
1463 |         "url": "https://github.com/sponsors/sindresorhus"
1464 |       }
1465 |     },
1466 |     "node_modules/opener": {
1467 |       "version": "1.5.2",
1468 |       "resolved": "https://registry.npmjs.org/opener/-/opener-1.5.2.tgz",
1469 |       "integrity": "sha512-ur5UIdyw5Y7yEj9wLzhqXiy6GZ3Mwx0yGI+5sMn2r0N0v3cKJvUmFH5yPP+WXh9e0xfyzyJX95D8l088DNFj7A==",
1470 |       "bin": {
1471 |         "opener": "bin/opener-bin.js"
1472 |       }
1473 |     },
1474 |     "node_modules/p-any": {
1475 |       "version": "3.0.0",
1476 |       "resolved": "https://registry.npmjs.org/p-any/-/p-any-3.0.0.tgz",
1477 |       "integrity": "sha512-5rqbqfsRWNb0sukt0awwgJMlaep+8jV45S15SKKB34z4UuzjcofIfnriCBhWjZP2jbVtjt9yRl7buB6RlKsu9w==",
1478 |       "dependencies": {
1479 |         "p-cancelable": "^2.0.0",
1480 |         "p-some": "^5.0.0"
1481 |       },
1482 |       "engines": {
1483 |         "node": ">=10"
1484 |       },
1485 |       "funding": {
1486 |         "url": "https://github.com/sponsors/sindresorhus"
1487 |       }
1488 |     },
1489 |     "node_modules/p-cancelable": {
1490 |       "version": "2.1.1",
1491 |       "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-2.1.1.tgz",
1492 |       "integrity": "sha512-BZOr3nRQHOntUjTrH8+Lh54smKHoHyur8We1V8DSMVrl5A2malOOwuJRnKRDjSnkoeBh4at6BwEnb5I7Jl31wg==",
1493 |       "engines": {
1494 |         "node": ">=8"
1495 |       }
1496 |     },
1497 |     "node_modules/p-finally": {
1498 |       "version": "1.0.0",
1499 |       "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
1500 |       "integrity": "sha512-LICb2p9CB7FS+0eR1oqWnHhp0FljGLZCWBE9aix0Uye9W8LTQPwMTYVGWQWIw9RdQiDg4+epXQODwIYJtSJaow==",
1501 |       "engines": {
1502 |         "node": ">=4"
1503 |       }
1504 |     },
1505 |     "node_modules/p-some": {
1506 |       "version": "5.0.0",
1507 |       "resolved": "https://registry.npmjs.org/p-some/-/p-some-5.0.0.tgz",
1508 |       "integrity": "sha512-Js5XZxo6vHjB9NOYAzWDYAIyyiPvva0DWESAIWIK7uhSpGsyg5FwUPxipU/SOQx5x9EqhOh545d1jo6cVkitig==",
1509 |       "dependencies": {
1510 |         "aggregate-error": "^3.0.0",
1511 |         "p-cancelable": "^2.0.0"
1512 |       },
1513 |       "engines": {
1514 |         "node": ">=10"
1515 |       },
1516 |       "funding": {
1517 |         "url": "https://github.com/sponsors/sindresorhus"
1518 |       }
1519 |     },
1520 |     "node_modules/p-timeout": {
1521 |       "version": "3.2.0",
1522 |       "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-3.2.0.tgz",
1523 |       "integrity": "sha512-rhIwUycgwwKcP9yTOOFK/AKsAopjjCakVqLHePO3CC6Mir1Z99xT+R63jZxAT5lFZLa2inS5h+ZS2GvR99/FBg==",
1524 |       "dependencies": {
1525 |         "p-finally": "^1.0.0"
1526 |       },
1527 |       "engines": {
1528 |         "node": ">=8"
1529 |       }
1530 |     },
1531 |     "node_modules/pac-proxy-agent": {
1532 |       "version": "7.0.1",
1533 |       "resolved": "https://registry.npmjs.org/pac-proxy-agent/-/pac-proxy-agent-7.0.1.tgz",
1534 |       "integrity": "sha512-ASV8yU4LLKBAjqIPMbrgtaKIvxQri/yh2OpI+S6hVa9JRkUI3Y3NPFbfngDtY7oFtSMD3w31Xns89mDa3Feo5A==",
1535 |       "dependencies": {
1536 |         "@tootallnate/quickjs-emscripten": "^0.23.0",
1537 |         "agent-base": "^7.0.2",
1538 |         "debug": "^4.3.4",
1539 |         "get-uri": "^6.0.1",
1540 |         "http-proxy-agent": "^7.0.0",
1541 |         "https-proxy-agent": "^7.0.2",
1542 |         "pac-resolver": "^7.0.0",
1543 |         "socks-proxy-agent": "^8.0.2"
1544 |       },
1545 |       "engines": {
1546 |         "node": ">= 14"
1547 |       }
1548 |     },
1549 |     "node_modules/pac-resolver": {
1550 |       "version": "7.0.1",
1551 |       "resolved": "https://registry.npmjs.org/pac-resolver/-/pac-resolver-7.0.1.tgz",
1552 |       "integrity": "sha512-5NPgf87AT2STgwa2ntRMr45jTKrYBGkVU36yT0ig/n/GMAa3oPqhZfIQ2kMEimReg0+t9kZViDVZ83qfVUlckg==",
1553 |       "dependencies": {
1554 |         "degenerator": "^5.0.0",
1555 |         "netmask": "^2.0.2"
1556 |       },
1557 |       "engines": {
1558 |         "node": ">= 14"
1559 |       }
1560 |     },
1561 |     "node_modules/parent-module": {
1562 |       "version": "1.0.1",
1563 |       "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
1564 |       "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
1565 |       "dependencies": {
1566 |         "callsites": "^3.0.0"
1567 |       },
1568 |       "engines": {
1569 |         "node": ">=6"
1570 |       }
1571 |     },
1572 |     "node_modules/parse-json": {
1573 |       "version": "5.2.0",
1574 |       "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
1575 |       "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
1576 |       "dependencies": {
1577 |         "@babel/code-frame": "^7.0.0",
1578 |         "error-ex": "^1.3.1",
1579 |         "json-parse-even-better-errors": "^2.3.0",
1580 |         "lines-and-columns": "^1.1.6"
1581 |       },
1582 |       "engines": {
1583 |         "node": ">=8"
1584 |       },
1585 |       "funding": {
1586 |         "url": "https://github.com/sponsors/sindresorhus"
1587 |       }
1588 |     },
1589 |     "node_modules/pend": {
1590 |       "version": "1.2.0",
1591 |       "resolved": "https://registry.npmjs.org/pend/-/pend-1.2.0.tgz",
1592 |       "integrity": "sha512-F3asv42UuXchdzt+xXqfW1OGlVBe+mxa2mqI0pg5yAHZPvFmY3Y6drSf/GQ1A86WgWEN9Kzh/WrgKa6iGcHXLg=="
1593 |     },
1594 |     "node_modules/portfinder": {
1595 |       "version": "1.0.32",
1596 |       "resolved": "https://registry.npmjs.org/portfinder/-/portfinder-1.0.32.tgz",
1597 |       "integrity": "sha512-on2ZJVVDXRADWE6jnQaX0ioEylzgBpQk8r55NE4wjXW1ZxO+BgDlY6DXwj20i0V8eB4SenDQ00WEaxfiIQPcxg==",
1598 |       "dependencies": {
1599 |         "async": "^2.6.4",
1600 |         "debug": "^3.2.7",
1601 |         "mkdirp": "^0.5.6"
1602 |       },
1603 |       "engines": {
1604 |         "node": ">= 0.12.0"
1605 |       }
1606 |     },
1607 |     "node_modules/portfinder/node_modules/async": {
1608 |       "version": "2.6.4",
1609 |       "resolved": "https://registry.npmjs.org/async/-/async-2.6.4.tgz",
1610 |       "integrity": "sha512-mzo5dfJYwAn29PeiJ0zvwTo04zj8HDJj0Mn8TD7sno7q12prdbnasKJHhkm2c1LgrhlJ0teaea8860oxi51mGA==",
1611 |       "dependencies": {
1612 |         "lodash": "^4.17.14"
1613 |       }
1614 |     },
1615 |     "node_modules/portfinder/node_modules/debug": {
1616 |       "version": "3.2.7",
1617 |       "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
1618 |       "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
1619 |       "dependencies": {
1620 |         "ms": "^2.1.1"
1621 |       }
1622 |     },
1623 |     "node_modules/prepend-http": {
1624 |       "version": "3.0.1",
1625 |       "resolved": "https://registry.npmjs.org/prepend-http/-/prepend-http-3.0.1.tgz",
1626 |       "integrity": "sha512-BLxfZh+m6UiAiCPZFJ4+vYoL7NrRs5XgCTRrjseATAggXhdZKKxn+JUNmuVYWY23bDHgaEHodxw8mnmtVEDtHw==",
1627 |       "engines": {
1628 |         "node": ">=8"
1629 |       }
1630 |     },
1631 |     "node_modules/progress": {
1632 |       "version": "2.0.3",
1633 |       "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
1634 |       "integrity": "sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==",
1635 |       "engines": {
1636 |         "node": ">=0.4.0"
1637 |       }
1638 |     },
1639 |     "node_modules/proxy-agent": {
1640 |       "version": "6.4.0",
1641 |       "resolved": "https://registry.npmjs.org/proxy-agent/-/proxy-agent-6.4.0.tgz",
1642 |       "integrity": "sha512-u0piLU+nCOHMgGjRbimiXmA9kM/L9EHh3zL81xCdp7m+Y2pHIsnmbdDoEDoAz5geaonNR6q6+yOPQs6n4T6sBQ==",
1643 |       "dependencies": {
1644 |         "agent-base": "^7.0.2",
1645 |         "debug": "^4.3.4",
1646 |         "http-proxy-agent": "^7.0.1",
1647 |         "https-proxy-agent": "^7.0.3",
1648 |         "lru-cache": "^7.14.1",
1649 |         "pac-proxy-agent": "^7.0.1",
1650 |         "proxy-from-env": "^1.1.0",
1651 |         "socks-proxy-agent": "^8.0.2"
1652 |       },
1653 |       "engines": {
1654 |         "node": ">= 14"
1655 |       }
1656 |     },
1657 |     "node_modules/proxy-from-env": {
1658 |       "version": "1.1.0",
1659 |       "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
1660 |       "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
1661 |     },
1662 |     "node_modules/pump": {
1663 |       "version": "3.0.0",
1664 |       "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
1665 |       "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
1666 |       "dependencies": {
1667 |         "end-of-stream": "^1.1.0",
1668 |         "once": "^1.3.1"
1669 |       }
1670 |     },
1671 |     "node_modules/puppeteer": {
1672 |       "version": "22.3.0",
1673 |       "resolved": "https://registry.npmjs.org/puppeteer/-/puppeteer-22.3.0.tgz",
1674 |       "integrity": "sha512-GC+tyjzYKjaNjhlDAuqRgDM+IOsqOG75Da4L28G4eULNLLxKDt+79x2OOSQ47HheJBgGq7ATSExNE6gayxP6cg==",
1675 |       "hasInstallScript": true,
1676 |       "dependencies": {
1677 |         "@puppeteer/browsers": "2.1.0",
1678 |         "cosmiconfig": "9.0.0",
1679 |         "puppeteer-core": "22.3.0"
1680 |       },
1681 |       "bin": {
1682 |         "puppeteer": "lib/esm/puppeteer/node/cli.js"
1683 |       },
1684 |       "engines": {
1685 |         "node": ">=18"
1686 |       }
1687 |     },
1688 |     "node_modules/puppeteer-core": {
1689 |       "version": "22.3.0",
1690 |       "resolved": "https://registry.npmjs.org/puppeteer-core/-/puppeteer-core-22.3.0.tgz",
1691 |       "integrity": "sha512-Ho5Vdpdro05ZyCx/l5Hkc5vHiibKTaY37fIAD9NF9Gi/vDxkVTeX40U/mFnEmeoxyuYALvWCJfi7JTT82R6Tuw==",
1692 |       "dependencies": {
1693 |         "@puppeteer/browsers": "2.1.0",
1694 |         "chromium-bidi": "0.5.10",
1695 |         "cross-fetch": "4.0.0",
1696 |         "debug": "4.3.4",
1697 |         "devtools-protocol": "0.0.1249869",
1698 |         "ws": "8.16.0"
1699 |       },
1700 |       "engines": {
1701 |         "node": ">=18"
1702 |       }
1703 |     },
1704 |     "node_modules/qs": {
1705 |       "version": "6.11.2",
1706 |       "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.2.tgz",
1707 |       "integrity": "sha512-tDNIz22aBzCDxLtVH++VnTfzxlfeK5CbqohpSqpJgj1Wg/cQbStNAz3NuqCs5vV+pjBsK4x4pN9HlVh7rcYRiA==",
1708 |       "dependencies": {
1709 |         "side-channel": "^1.0.4"
1710 |       },
1711 |       "engines": {
1712 |         "node": ">=0.6"
1713 |       },
1714 |       "funding": {
1715 |         "url": "https://github.com/sponsors/ljharb"
1716 |       }
1717 |     },
1718 |     "node_modules/querystringify": {
1719 |       "version": "2.2.0",
1720 |       "resolved": "https://registry.npmjs.org/querystringify/-/querystringify-2.2.0.tgz",
1721 |       "integrity": "sha512-FIqgj2EUvTa7R50u0rGsyTftzjYmv/a3hO345bZNrqabNqjtgiDMgmo4mkUjd+nzU5oF3dClKqFIPUKybUyqoQ=="
1722 |     },
1723 |     "node_modules/queue-tick": {
1724 |       "version": "1.0.1",
1725 |       "resolved": "https://registry.npmjs.org/queue-tick/-/queue-tick-1.0.1.tgz",
1726 |       "integrity": "sha512-kJt5qhMxoszgU/62PLP1CJytzd2NKetjSRnyuj31fDd3Rlcz3fzlFdFLD1SItunPwyqEOkca6GbV612BWfaBag=="
1727 |     },
1728 |     "node_modules/quick-lru": {
1729 |       "version": "5.1.1",
1730 |       "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-5.1.1.tgz",
1731 |       "integrity": "sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==",
1732 |       "engines": {
1733 |         "node": ">=10"
1734 |       },
1735 |       "funding": {
1736 |         "url": "https://github.com/sponsors/sindresorhus"
1737 |       }
1738 |     },
1739 |     "node_modules/require-directory": {
1740 |       "version": "2.1.1",
1741 |       "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
1742 |       "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
1743 |       "engines": {
1744 |         "node": ">=0.10.0"
1745 |       }
1746 |     },
1747 |     "node_modules/requires-port": {
1748 |       "version": "1.0.0",
1749 |       "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
1750 |       "integrity": "sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ=="
1751 |     },
1752 |     "node_modules/resolve-alpn": {
1753 |       "version": "1.2.1",
1754 |       "resolved": "https://registry.npmjs.org/resolve-alpn/-/resolve-alpn-1.2.1.tgz",
1755 |       "integrity": "sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g=="
1756 |     },
1757 |     "node_modules/resolve-from": {
1758 |       "version": "4.0.0",
1759 |       "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
1760 |       "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
1761 |       "engines": {
1762 |         "node": ">=4"
1763 |       }
1764 |     },
1765 |     "node_modules/responselike": {
1766 |       "version": "2.0.1",
1767 |       "resolved": "https://registry.npmjs.org/responselike/-/responselike-2.0.1.tgz",
1768 |       "integrity": "sha512-4gl03wn3hj1HP3yzgdI7d3lCkF95F21Pz4BPGvKHinyQzALR5CapwC8yIi0Rh58DEMQ/SguC03wFj2k0M/mHhw==",
1769 |       "dependencies": {
1770 |         "lowercase-keys": "^2.0.0"
1771 |       },
1772 |       "funding": {
1773 |         "url": "https://github.com/sponsors/sindresorhus"
1774 |       }
1775 |     },
1776 |     "node_modules/router-ips": {
1777 |       "version": "1.0.0",
1778 |       "resolved": "https://registry.npmjs.org/router-ips/-/router-ips-1.0.0.tgz",
1779 |       "integrity": "sha512-yBo6F52Un/WYioXbedBGvrKIiofbwt+4cUhdqDb9fNMJBI4D4jOy7jlxxaRVEvICPKU7xMmJDtDFR6YswX/sFQ==",
1780 |       "engines": {
1781 |         "node": ">=4"
1782 |       }
1783 |     },
1784 |     "node_modules/run-applescript": {
1785 |       "version": "7.0.0",
1786 |       "resolved": "https://registry.npmjs.org/run-applescript/-/run-applescript-7.0.0.tgz",
1787 |       "integrity": "sha512-9by4Ij99JUr/MCFBUkDKLWK3G9HVXmabKz9U5MlIAIuvuzkiOicRYs8XJLxX+xahD+mLiiCYDqF9dKAgtzKP1A==",
1788 |       "engines": {
1789 |         "node": ">=18"
1790 |       },
1791 |       "funding": {
1792 |         "url": "https://github.com/sponsors/sindresorhus"
1793 |       }
1794 |     },
1795 |     "node_modules/safe-buffer": {
1796 |       "version": "5.1.2",
1797 |       "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
1798 |       "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
1799 |     },
1800 |     "node_modules/safer-buffer": {
1801 |       "version": "2.1.2",
1802 |       "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
1803 |       "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
1804 |     },
1805 |     "node_modules/secure-compare": {
1806 |       "version": "3.0.1",
1807 |       "resolved": "https://registry.npmjs.org/secure-compare/-/secure-compare-3.0.1.tgz",
1808 |       "integrity": "sha512-AckIIV90rPDcBcglUwXPF3kg0P0qmPsPXAj6BBEENQE1p5yA1xfmDJzfi1Tappj37Pv2mVbKpL3Z1T+Nn7k1Qw=="
1809 |     },
1810 |     "node_modules/semver": {
1811 |       "version": "7.6.0",
1812 |       "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.0.tgz",
1813 |       "integrity": "sha512-EnwXhrlwXMk9gKu5/flx5sv/an57AkRplG3hTK68W7FRDN+k+OWBj65M7719OkA82XLBxrcX0KSHj+X5COhOVg==",
1814 |       "dependencies": {
1815 |         "lru-cache": "^6.0.0"
1816 |       },
1817 |       "bin": {
1818 |         "semver": "bin/semver.js"
1819 |       },
1820 |       "engines": {
1821 |         "node": ">=10"
1822 |       }
1823 |     },
1824 |     "node_modules/semver/node_modules/lru-cache": {
1825 |       "version": "6.0.0",
1826 |       "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
1827 |       "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
1828 |       "dependencies": {
1829 |         "yallist": "^4.0.0"
1830 |       },
1831 |       "engines": {
1832 |         "node": ">=10"
1833 |       }
1834 |     },
1835 |     "node_modules/set-function-length": {
1836 |       "version": "1.2.1",
1837 |       "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.1.tgz",
1838 |       "integrity": "sha512-j4t6ccc+VsKwYHso+kElc5neZpjtq9EnRICFZtWyBsLojhmeF/ZBd/elqm22WJh/BziDe/SBiOeAt0m2mfLD0g==",
1839 |       "dependencies": {
1840 |         "define-data-property": "^1.1.2",
1841 |         "es-errors": "^1.3.0",
1842 |         "function-bind": "^1.1.2",
1843 |         "get-intrinsic": "^1.2.3",
1844 |         "gopd": "^1.0.1",
1845 |         "has-property-descriptors": "^1.0.1"
1846 |       },
1847 |       "engines": {
1848 |         "node": ">= 0.4"
1849 |       }
1850 |     },
1851 |     "node_modules/side-channel": {
1852 |       "version": "1.0.6",
1853 |       "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.6.tgz",
1854 |       "integrity": "sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==",
1855 |       "dependencies": {
1856 |         "call-bind": "^1.0.7",
1857 |         "es-errors": "^1.3.0",
1858 |         "get-intrinsic": "^1.2.4",
1859 |         "object-inspect": "^1.13.1"
1860 |       },
1861 |       "engines": {
1862 |         "node": ">= 0.4"
1863 |       },
1864 |       "funding": {
1865 |         "url": "https://github.com/sponsors/ljharb"
1866 |       }
1867 |     },
1868 |     "node_modules/smart-buffer": {
1869 |       "version": "4.2.0",
1870 |       "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
1871 |       "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
1872 |       "engines": {
1873 |         "node": ">= 6.0.0",
1874 |         "npm": ">= 3.0.0"
1875 |       }
1876 |     },
1877 |     "node_modules/socks": {
1878 |       "version": "2.8.1",
1879 |       "resolved": "https://registry.npmjs.org/socks/-/socks-2.8.1.tgz",
1880 |       "integrity": "sha512-B6w7tkwNid7ToxjZ08rQMT8M9BJAf8DKx8Ft4NivzH0zBUfd6jldGcisJn/RLgxcX3FPNDdNQCUEMMT79b+oCQ==",
1881 |       "dependencies": {
1882 |         "ip-address": "^9.0.5",
1883 |         "smart-buffer": "^4.2.0"
1884 |       },
1885 |       "engines": {
1886 |         "node": ">= 10.0.0",
1887 |         "npm": ">= 3.0.0"
1888 |       }
1889 |     },
1890 |     "node_modules/socks-proxy-agent": {
1891 |       "version": "8.0.2",
1892 |       "resolved": "https://registry.npmjs.org/socks-proxy-agent/-/socks-proxy-agent-8.0.2.tgz",
1893 |       "integrity": "sha512-8zuqoLv1aP/66PHF5TqwJ7Czm3Yv32urJQHrVyhD7mmA6d61Zv8cIXQYPTWwmg6qlupnPvs/QKDmfa4P/qct2g==",
1894 |       "dependencies": {
1895 |         "agent-base": "^7.0.2",
1896 |         "debug": "^4.3.4",
1897 |         "socks": "^2.7.1"
1898 |       },
1899 |       "engines": {
1900 |         "node": ">= 14"
1901 |       }
1902 |     },
1903 |     "node_modules/source-map": {
1904 |       "version": "0.6.1",
1905 |       "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
1906 |       "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
1907 |       "optional": true,
1908 |       "engines": {
1909 |         "node": ">=0.10.0"
1910 |       }
1911 |     },
1912 |     "node_modules/sprintf-js": {
1913 |       "version": "1.1.3",
1914 |       "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.3.tgz",
1915 |       "integrity": "sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA=="
1916 |     },
1917 |     "node_modules/streamx": {
1918 |       "version": "2.16.1",
1919 |       "resolved": "https://registry.npmjs.org/streamx/-/streamx-2.16.1.tgz",
1920 |       "integrity": "sha512-m9QYj6WygWyWa3H1YY69amr4nVgy61xfjys7xO7kviL5rfIEc2naf+ewFiOA+aEJD7y0JO3h2GoiUv4TDwEGzQ==",
1921 |       "dependencies": {
1922 |         "fast-fifo": "^1.1.0",
1923 |         "queue-tick": "^1.0.1"
1924 |       },
1925 |       "optionalDependencies": {
1926 |         "bare-events": "^2.2.0"
1927 |       }
1928 |     },
1929 |     "node_modules/string-width": {
1930 |       "version": "4.2.3",
1931 |       "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
1932 |       "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
1933 |       "dependencies": {
1934 |         "emoji-regex": "^8.0.0",
1935 |         "is-fullwidth-code-point": "^3.0.0",
1936 |         "strip-ansi": "^6.0.1"
1937 |       },
1938 |       "engines": {
1939 |         "node": ">=8"
1940 |       }
1941 |     },
1942 |     "node_modules/strip-ansi": {
1943 |       "version": "6.0.1",
1944 |       "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
1945 |       "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
1946 |       "dependencies": {
1947 |         "ansi-regex": "^5.0.1"
1948 |       },
1949 |       "engines": {
1950 |         "node": ">=8"
1951 |       }
1952 |     },
1953 |     "node_modules/supports-color": {
1954 |       "version": "5.5.0",
1955 |       "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
1956 |       "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
1957 |       "dependencies": {
1958 |         "has-flag": "^3.0.0"
1959 |       },
1960 |       "engines": {
1961 |         "node": ">=4"
1962 |       }
1963 |     },
1964 |     "node_modules/tar-fs": {
1965 |       "version": "3.0.5",
1966 |       "resolved": "https://registry.npmjs.org/tar-fs/-/tar-fs-3.0.5.tgz",
1967 |       "integrity": "sha512-JOgGAmZyMgbqpLwct7ZV8VzkEB6pxXFBVErLtb+XCOqzc6w1xiWKI9GVd6bwk68EX7eJ4DWmfXVmq8K2ziZTGg==",
1968 |       "dependencies": {
1969 |         "pump": "^3.0.0",
1970 |         "tar-stream": "^3.1.5"
1971 |       },
1972 |       "optionalDependencies": {
1973 |         "bare-fs": "^2.1.1",
1974 |         "bare-path": "^2.1.0"
1975 |       }
1976 |     },
1977 |     "node_modules/tar-stream": {
1978 |       "version": "3.1.7",
1979 |       "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-3.1.7.tgz",
1980 |       "integrity": "sha512-qJj60CXt7IU1Ffyc3NJMjh6EkuCFej46zUqJ4J7pqYlThyd9bO0XBTmcOIhSzZJVWfsLks0+nle/j538YAW9RQ==",
1981 |       "dependencies": {
1982 |         "b4a": "^1.6.4",
1983 |         "fast-fifo": "^1.2.0",
1984 |         "streamx": "^2.15.0"
1985 |       }
1986 |     },
1987 |     "node_modules/through": {
1988 |       "version": "2.3.8",
1989 |       "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
1990 |       "integrity": "sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg=="
1991 |     },
1992 |     "node_modules/tr46": {
1993 |       "version": "0.0.3",
1994 |       "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
1995 |       "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
1996 |     },
1997 |     "node_modules/tslib": {
1998 |       "version": "2.6.2",
1999 |       "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz",
2000 |       "integrity": "sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q=="
2001 |     },
2002 |     "node_modules/unbzip2-stream": {
2003 |       "version": "1.4.3",
2004 |       "resolved": "https://registry.npmjs.org/unbzip2-stream/-/unbzip2-stream-1.4.3.tgz",
2005 |       "integrity": "sha512-mlExGW4w71ebDJviH16lQLtZS32VKqsSfk80GCfUlwT/4/hNRFsoscrF/c++9xinkMzECL1uL9DDwXqFWkruPg==",
2006 |       "dependencies": {
2007 |         "buffer": "^5.2.1",
2008 |         "through": "^2.3.8"
2009 |       }
2010 |     },
2011 |     "node_modules/undici-types": {
2012 |       "version": "5.26.5",
2013 |       "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
2014 |       "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA=="
2015 |     },
2016 |     "node_modules/union": {
2017 |       "version": "0.5.0",
2018 |       "resolved": "https://registry.npmjs.org/union/-/union-0.5.0.tgz",
2019 |       "integrity": "sha512-N6uOhuW6zO95P3Mel2I2zMsbsanvvtgn6jVqJv4vbVcz/JN0OkL9suomjQGmWtxJQXOCqUJvquc1sMeNz/IwlA==",
2020 |       "dependencies": {
2021 |         "qs": "^6.4.0"
2022 |       },
2023 |       "engines": {
2024 |         "node": ">= 0.8.0"
2025 |       }
2026 |     },
2027 |     "node_modules/universalify": {
2028 |       "version": "2.0.1",
2029 |       "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
2030 |       "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
2031 |       "engines": {
2032 |         "node": ">= 10.0.0"
2033 |       }
2034 |     },
2035 |     "node_modules/url-join": {
2036 |       "version": "4.0.1",
2037 |       "resolved": "https://registry.npmjs.org/url-join/-/url-join-4.0.1.tgz",
2038 |       "integrity": "sha512-jk1+QP6ZJqyOiuEI9AEWQfju/nB2Pw466kbA0LEZljHwKeMgd9WrAEgEGxjPDD2+TNbbb37rTyhEfrCXfuKXnA=="
2039 |     },
2040 |     "node_modules/url-parse": {
2041 |       "version": "1.5.10",
2042 |       "resolved": "https://registry.npmjs.org/url-parse/-/url-parse-1.5.10.tgz",
2043 |       "integrity": "sha512-WypcfiRhfeUP9vvF0j6rw0J3hrWrw6iZv3+22h6iRMJ/8z1Tj6XfLP4DsUix5MhMPnXpiHDoKyoZ/bdCkwBCiQ==",
2044 |       "dependencies": {
2045 |         "querystringify": "^2.1.1",
2046 |         "requires-port": "^1.0.0"
2047 |       }
2048 |     },
2049 |     "node_modules/urlpattern-polyfill": {
2050 |       "version": "10.0.0",
2051 |       "resolved": "https://registry.npmjs.org/urlpattern-polyfill/-/urlpattern-polyfill-10.0.0.tgz",
2052 |       "integrity": "sha512-H/A06tKD7sS1O1X2SshBVeA5FLycRpjqiBeqGKmBwBDBy28EnRjORxTNe269KSSr5un5qyWi1iL61wLxpd+ZOg=="
2053 |     },
2054 |     "node_modules/webidl-conversions": {
2055 |       "version": "3.0.1",
2056 |       "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
2057 |       "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
2058 |     },
2059 |     "node_modules/whatwg-encoding": {
2060 |       "version": "2.0.0",
2061 |       "resolved": "https://registry.npmjs.org/whatwg-encoding/-/whatwg-encoding-2.0.0.tgz",
2062 |       "integrity": "sha512-p41ogyeMUrw3jWclHWTQg1k05DSVXPLcVxRTYsXUk+ZooOCZLcoYgPZ/HL/D/N+uQPOtcp1me1WhBEaX02mhWg==",
2063 |       "dependencies": {
2064 |         "iconv-lite": "0.6.3"
2065 |       },
2066 |       "engines": {
2067 |         "node": ">=12"
2068 |       }
2069 |     },
2070 |     "node_modules/whatwg-url": {
2071 |       "version": "5.0.0",
2072 |       "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
2073 |       "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
2074 |       "dependencies": {
2075 |         "tr46": "~0.0.3",
2076 |         "webidl-conversions": "^3.0.0"
2077 |       }
2078 |     },
2079 |     "node_modules/wrap-ansi": {
2080 |       "version": "7.0.0",
2081 |       "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
2082 |       "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
2083 |       "dependencies": {
2084 |         "ansi-styles": "^4.0.0",
2085 |         "string-width": "^4.1.0",
2086 |         "strip-ansi": "^6.0.0"
2087 |       },
2088 |       "engines": {
2089 |         "node": ">=10"
2090 |       },
2091 |       "funding": {
2092 |         "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
2093 |       }
2094 |     },
2095 |     "node_modules/wrap-ansi/node_modules/ansi-styles": {
2096 |       "version": "4.3.0",
2097 |       "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
2098 |       "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
2099 |       "dependencies": {
2100 |         "color-convert": "^2.0.1"
2101 |       },
2102 |       "engines": {
2103 |         "node": ">=8"
2104 |       },
2105 |       "funding": {
2106 |         "url": "https://github.com/chalk/ansi-styles?sponsor=1"
2107 |       }
2108 |     },
2109 |     "node_modules/wrap-ansi/node_modules/color-convert": {
2110 |       "version": "2.0.1",
2111 |       "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
2112 |       "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
2113 |       "dependencies": {
2114 |         "color-name": "~1.1.4"
2115 |       },
2116 |       "engines": {
2117 |         "node": ">=7.0.0"
2118 |       }
2119 |     },
2120 |     "node_modules/wrap-ansi/node_modules/color-name": {
2121 |       "version": "1.1.4",
2122 |       "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
2123 |       "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
2124 |     },
2125 |     "node_modules/wrappy": {
2126 |       "version": "1.0.2",
2127 |       "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
2128 |       "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
2129 |     },
2130 |     "node_modules/ws": {
2131 |       "version": "8.16.0",
2132 |       "resolved": "https://registry.npmjs.org/ws/-/ws-8.16.0.tgz",
2133 |       "integrity": "sha512-HS0c//TP7Ina87TfiPUz1rQzMhHrl/SG2guqRcTOIUYD2q8uhUdNHZYJUaQ8aTGPzCh+c6oawMKW35nFl1dxyQ==",
2134 |       "engines": {
2135 |         "node": ">=10.0.0"
2136 |       },
2137 |       "peerDependencies": {
2138 |         "bufferutil": "^4.0.1",
2139 |         "utf-8-validate": ">=5.0.2"
2140 |       },
2141 |       "peerDependenciesMeta": {
2142 |         "bufferutil": {
2143 |           "optional": true
2144 |         },
2145 |         "utf-8-validate": {
2146 |           "optional": true
2147 |         }
2148 |       }
2149 |     },
2150 |     "node_modules/y18n": {
2151 |       "version": "5.0.8",
2152 |       "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
2153 |       "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
2154 |       "engines": {
2155 |         "node": ">=10"
2156 |       }
2157 |     },
2158 |     "node_modules/yallist": {
2159 |       "version": "4.0.0",
2160 |       "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
2161 |       "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
2162 |     },
2163 |     "node_modules/yargs": {
2164 |       "version": "17.7.2",
2165 |       "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
2166 |       "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
2167 |       "dependencies": {
2168 |         "cliui": "^8.0.1",
2169 |         "escalade": "^3.1.1",
2170 |         "get-caller-file": "^2.0.5",
2171 |         "require-directory": "^2.1.1",
2172 |         "string-width": "^4.2.3",
2173 |         "y18n": "^5.0.5",
2174 |         "yargs-parser": "^21.1.1"
2175 |       },
2176 |       "engines": {
2177 |         "node": ">=12"
2178 |       }
2179 |     },
2180 |     "node_modules/yargs-parser": {
2181 |       "version": "21.1.1",
2182 |       "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
2183 |       "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
2184 |       "engines": {
2185 |         "node": ">=12"
2186 |       }
2187 |     },
2188 |     "node_modules/yauzl": {
2189 |       "version": "2.10.0",
2190 |       "resolved": "https://registry.npmjs.org/yauzl/-/yauzl-2.10.0.tgz",
2191 |       "integrity": "sha512-p4a9I6X6nu6IhoGmBqAcbJy1mlC4j27vEPZX9F4L4/vZT3Lyq1VkFHw/V/PUcB9Buo+DG3iHkT0x3Qya58zc3g==",
2192 |       "dependencies": {
2193 |         "buffer-crc32": "~0.2.3",
2194 |         "fd-slicer": "~1.1.0"
2195 |       }
2196 |     }
2197 |   }
2198 | }
2199 | 


--------------------------------------------------------------------------------
/package.json:
--------------------------------------------------------------------------------
1 | {"dependencies":{"http-server":"^14.1.1","is-reachable":"^5.2.1","open":"^10.0.4","puppeteer":"^22.3.0"},"scripts":{"start":"node start_server.js"}}


--------------------------------------------------------------------------------
/pfp_fetch_and_id_correction.js:
--------------------------------------------------------------------------------
  1 | /* eslint-disable no-mixed-spaces-and-tabs */
  2 | const fs = require('fs')
  3 | const puppeteer = require('puppeteer')
  4 | const isReachable = require('is-reachable')
  5 | 
  6 | const getPokemonImageUrl = () => {
  7 | 	const baseUrl = 'https://assets.pokemon.com/assets/cms2/img/pokedex/full/'
  8 | 	let pokemonNumber
  9 | 	// repeating random number generation if we get 54 as the result
 10 | 	// cause we are using this pokemon number as a fallback image 
 11 | 	// when image src URL fails to fetch the image
 12 | 	do {
 13 | 		pokemonNumber = Math.floor(Math.random() * 1000)
 14 | 	} while (pokemonNumber === 54)
 15 | 	const paddedNumber = pokemonNumber.toString().padStart(3, '0')
 16 | 	return  `${baseUrl}${paddedNumber}.png`
 17 | }
 18 | 
 19 | 
 20 | // const fetchAvatarFromTwitter = async (page, twitterUsername) => {
 21 | // 	await page.goto(`https://twitter.com/${twitterUsername}/photo`, { waitUntil: 'domcontentloaded' })
 22 | // 	const title = await page.evaluate(() => document.querySelector('title')?.innerText)
 23 | // 	const textExists = await page.evaluate(() => document.body.textContent.includes('This account doesn’t exist'))
 24 | 
 25 | // 	if (textExists || title === 'Profile / X') {
 26 | // 		console.log('Account does not exist, skipping')
 27 | // 		return null
 28 | // 	}
 29 | 
 30 | // 	await page.waitForSelector('img[alt="Image"][draggable="true"]', { timeout: 10000 })
 31 | // 	const imageSrc = await page.evaluate(() => {
 32 | // 		const image = document.querySelector('img[alt="Image"][draggable="true"]')
 33 | // 		return image ? image.src : null
 34 | // 	})
 35 | // 	return imageSrc
 36 | // }
 37 | 
 38 | const fetchAvatarFromSotwe = async (page, twitterUsername, id) => {
 39 | 	await page.goto(`https://sotwe.com/${twitterUsername}`, { waitUntil: 'networkidle2' })
 40 | 	const title = await page.evaluate(() => document.querySelector('title')?.innerText)
 41 | 
 42 | 	if (title === 'Twitter Web Viewer & Trend Analyzer & Downloader | Sotwe') {
 43 | 		console.log('Account does not exist, skipping')
 44 | 		return { imageSrc: null, bannerSrc: null }
 45 | 	}
 46 | 
 47 | 
 48 | 	await page.waitForSelector(`img[alt="${twitterUsername}'s profile image"]`, { timeout: 10000 })
 49 | 	const imageSrc = await page.evaluate((twitterUsername) => {
 50 | 		const image = document.querySelector(`img[alt="${twitterUsername}'s profile image"]`)
 51 | 		return image ? image.src : null
 52 | 	}, twitterUsername)
 53 | 
 54 | 	if(imageSrc && imageSrc.startsWith('data:image')) {
 55 | 		throw new Error(`Image source for ${twitterUsername} is a data URL, not a link. Retrying`)
 56 | 	}
 57 | 
 58 | 	let bannerSrc = 'already_exists'
 59 | 	if (id.includes('notfound')) {
 60 | 		await page.waitForSelector(`img[alt="${twitterUsername}'s profile banner image"]`, { timeout: 10000 })
 61 | 		bannerSrc = await page.evaluate((twitterUsername) => {
 62 | 			const image = document.querySelector(`img[alt="${twitterUsername}'s profile banner image"]`)
 63 | 			return image ? image.src : null
 64 | 		}, twitterUsername)
 65 | 	}
 66 | 
 67 | 	return { imageSrc, bannerSrc }
 68 | }
 69 | 
 70 | const fetchAvatarFromTwstalker = async (page, twitterUsername, id) => {
 71 | 
 72 | 	await page.goto(`https://twstalker.com/${twitterUsername}`, { waitUntil: 'domcontentloaded' }, {timeout: 5000})
 73 | 
 74 | 	// I don't want to retry so skip accounts do not exist using simple logic
 75 | 	const areAllCountsZero = await page.evaluate(() => {
 76 | 		const numbrElements = Array.from(document.querySelectorAll('.dscun-numbr'))
 77 | 		return numbrElements.every(element => parseInt(element.textContent.replace('K', '000')) === 0)
 78 | 			  })
 79 | 	
 80 | 
 81 | 	if(areAllCountsZero) {
 82 | 		console.log(`Account does not exist or deactivated: ${twitterUsername}`)
 83 | 		return {twitterUsername: twitterUsername, imageSrc: getPokemonImageUrl(), bannerSrc: null,  id: id}
 84 | 	}
 85 | 
 86 | 	await page.waitForSelector('a.thumbnail img.img-thumbnail', {timeout: 5000}) 
 87 | 	let imageSrc = await page.$eval('a.thumbnail img.img-thumbnail', img => img.src)
 88 | 	
 89 | 
 90 | 	let bannerSrc = 'already_exists'
 91 | 	if (id.includes('notfound')) {
 92 | 		bannerSrc = await page.evaluate(() => {
 93 | 			const element = document.querySelector('.todo-thumb1.dash-bg-image1.dash-bg-overlay')
 94 | 			// Extract the URL part from the `background-image` CSS property
 95 | 			const style = window.getComputedStyle(element)
 96 | 			const bgImage = style.backgroundImage // e.g., url("http://example.com/image.jpg")
 97 | 			return bgImage.replace(/url\(["']?(.*?)["']?\)/, '$1') // Remove url("...") wrapper
 98 | 		  })
 99 | 	}
100 | 
101 | 	return { imageSrc, bannerSrc }
102 | }
103 | 
104 | const fetchAvatarInstalkerOrg = async (page, twitterUsername, id) => {
105 | 
106 | 	await page.goto(`https://instalker.org/${twitterUsername}`, { waitUntil: 'domcontentloaded' }, {timeout: 5000})
107 | 
108 | 	// I don't want to retry so skip accounts do not exist using simple logic
109 | 	const areAllCountsZero = await page.evaluate(() => {
110 | 		const numbrElements = Array.from(document.querySelectorAll('.dscun-numbr'))
111 | 		return numbrElements.every(element => parseInt(element.textContent.replace('K', '000')) === 0)
112 | 			  })
113 | 	
114 | 
115 | 	if(areAllCountsZero) {
116 | 		console.log(`Account does not exist or deactivated: ${twitterUsername}`)
117 | 		return {twitterUsername: twitterUsername, imageSrc: getPokemonImageUrl(), bannerSrc: null,  id: id}
118 | 	}
119 | 
120 | 	await page.waitForSelector('img[src^="https://pbs.twimg.com/profile_images"]')
121 | 
122 | 	const imageSrc = await page.$eval('img[src^="https://pbs.twimg.com/profile_images"]', img => img.src)	
123 | 
124 | 	let bannerSrc = 'already_exists'
125 | 	if (id.includes('notfound')) {
126 | 		bannerSrc = await page.evaluate(() => {
127 | 			const element = document.querySelector('.todo-thumb1.dash-bg-image1.dash-bg-overlay')
128 | 			// Extract the URL part from the `background-image` CSS property
129 | 			const style = window.getComputedStyle(element)
130 | 			const bgImage = style.backgroundImage // e.g., url("http://example.com/image.jpg")
131 | 			return bgImage.replace(/url\(["']?(.*?)["']?\)/, '$1') // Remove url("...") wrapper
132 | 		  })
133 | 	}
134 | 
135 | 	return { imageSrc, bannerSrc }
136 | }
137 | 
138 | const fetchAvatarFromMuskViewer = async (page, twitterUsername, id) => {
139 | 
140 | 	await page.goto(`https://muskviewer.com/${twitterUsername}`, { waitUntil: 'domcontentloaded' }, {timeout: 5000})
141 | 
142 | 	const hasInternalServerError = await page.evaluate(() => {
143 | 		const h1Text = document.querySelector('h1')?.textContent || ''
144 | 		return h1Text.includes('500 — Internal Server Error')
145 | 	  })
146 | 
147 | 	if (hasInternalServerError) {
148 | 		console.log(`Account does not exist : ${twitterUsername}`)
149 | 		return {twitterUsername: twitterUsername, imageSrc: getPokemonImageUrl(), bannerSrc: null,  id: id}
150 | 	}
151 | 
152 | 	// await page.waitForSelector('img[alt="Tweet media"]', {timeout: 5000})
153 | 	const imageSrc = await page.evaluate(() => {
154 | 		const metaElement = document.querySelector('meta[name="og:image"]');
155 | 		return metaElement ? metaElement.getAttribute('content') : null;
156 | 	  });
157 | 	
158 | 	let bannerSrc = 'already_exists'
159 | 	
160 | 	return { imageSrc, bannerSrc }
161 | }
162 | 
163 | 
164 | const getAvatar = async (id, twitterUsername, browser, weight, isReachablePrimary) => {
165 | 	let attempts = 2
166 | 	for (let i = 0; i < attempts; i++) {
167 | 		const page = await browser.newPage()
168 | 		await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36')
169 | 		try {
170 | 			let result
171 | 			// sotwe keeps image for deactivated accounts too hence using it first
172 | 			if (isReachablePrimary) {
173 | 				let { imageSrc, bannerSrc } = await fetchAvatarFromMuskViewer(page, twitterUsername, id)
174 | 				
175 | 				if(!imageSrc) {
176 | 					console.log('null image possibily line 150', imageSrc)
177 | 					imageSrc = getPokemonImageUrl()
178 | 				}
179 | 				
180 | 				result = {twitterUsername, imageSrc, bannerSrc, weight, id}
181 | 
182 | 			} else {
183 | 				let { imageSrc, bannerSrc } = await fetchAvatarFromTwstalker(page, twitterUsername, id)
184 | 
185 | 				if(!imageSrc) {
186 | 					console.log('null image possibily line 160', imageSrc)
187 | 					imageSrc = getPokemonImageUrl()
188 | 				}
189 | 				result = {twitterUsername, imageSrc, bannerSrc, weight, id}
190 | 			}
191 | 			console.log(`${twitterUsername}: ${result.imageSrc}`)
192 | 			return result
193 | 		} catch (error) {
194 | 			console.error(`Attempt ${i + 1} failed for ${twitterUsername}: ${error.message}`)
195 | 			if (i === attempts - 1) {
196 | 				return {twitterUsername, imageSrc: getPokemonImageUrl(), bannerSrc: null, weight, id}
197 | 			}
198 | 		} finally {
199 | 			await page.close()
200 | 		}
201 | 	}
202 | }
203 | 
204 | 
205 | const chunkArray = (array, size) => {
206 | 	const chunkedArr = []
207 | 	for (let i = 0; i < array.length; i += size) {
208 | 		chunkedArr.push(array.slice(i, i + size))
209 | 	}
210 | 	return chunkedArr
211 | }
212 | 
213 | const processChunk = async (chunk, browser) => {
214 | 	const primaryWebsite = 'twstalker.com'
215 | 	const isReachablePrimary = await isReachable(primaryWebsite)
216 | 	isReachablePrimary ? console.log('fetching from twstalker') : console.log('instalk')
217 | 	return await Promise.all(chunk.map(([id, { twitterUsername, weight }]) => getAvatar(id, twitterUsername, browser, weight, isReachablePrimary)))
218 | }
219 | 
220 | const filePath = 'sortedCombinedWeights.json';
221 | 
222 | (async () => {
223 | 	try {
224 | 		const jsonString = fs.readFileSync(filePath, 'utf8')
225 | 		const data = JSON.parse(jsonString)
226 | 		
227 | 		// can adjust this
228 | 		const topN = 250
229 | 		const entries = data.slice(0, topN) // Use directly, assuming your data structure
230 | 		const remainingEntries = data.slice(topN)
231 | 
232 | 		const chunks = chunkArray(entries, 25)
233 | 		let results = []
234 |   
235 | 		for (const chunk of chunks) {
236 | 			console.log(`Processing a chunk of ${chunk.length} entries...`)
237 | 			const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox', '--disable-setuid-sandbox'] })
238 | 			const chunkResults = await processChunk(chunk, browser)
239 | 			results = results.concat(chunkResults)
240 | 			await browser.close()
241 | 		}
242 |         
243 | 		const user_mentions_dict = fs.readFileSync('user_mentions_screen_name_mapping.json', 'utf8')
244 | 		const userMentionsDict = JSON.parse(user_mentions_dict)
245 | 		
246 | 		// update missing username and id
247 | 		const screenNameToId = userMentionsDict.screenNameToId
248 | 		const idToScreenName = userMentionsDict.idToScreenName
249 | 
250 | 		let updatedScreenNameToId = {}
251 | 		let updatedIdToScreenName = {}
252 | 
253 | 		results.forEach(result => {
254 | 			const { twitterUsername, id, imageSrc } = result // Extract necessary details from each result.
255 | 			
256 | 			// Update the mapping with a new structure.
257 | 			updatedScreenNameToId[twitterUsername] = { id, imageSrc }
258 | 			updatedIdToScreenName[id] = { twitterUsername, imageSrc }
259 | 		})
260 | 		
261 | 
262 | 		remainingEntries.forEach(([id, { twitterUsername, weight }]) => {
263 | 			
264 | 			results.push({twitterUsername: twitterUsername, imageSrc: getPokemonImageUrl(), weight: weight, id: id})
265 | 		})
266 | 		
267 | 
268 | 		// PFP FETCH IS DONE
269 | 		// BELOW THIS POINT IS TO FIX MISSING ACCOUNT IDS
270 | 		
271 | 
272 | 		// add remaining weight
273 | 		const sortedDmWeightsRaw = fs.readFileSync('sortedDmWeights.json', 'utf8')
274 | 		const sortedDmWeightsArray = JSON.parse(sortedDmWeightsRaw)
275 | 		const sortedDmWeightsLookup = sortedDmWeightsArray.reduce((acc, [id, { weight }]) => {
276 | 			acc[id] = weight // Assign weight to the id key
277 | 			return acc
278 | 		}, {})
279 | 
280 | 		
281 | 
282 | 
283 | 		fs.writeFileSync('user_mentions_screen_name_mapping.json', JSON.stringify({screenNameToId: updatedScreenNameToId, idToScreenName: updatedIdToScreenName}, null, 2), 'utf8', (err) => {
284 | 			if (err) {
285 | 			  console.error('An error occurred while writing the JSON to the file:', err)
286 | 			} else {
287 | 			  console.log('Successfully updated and saved the screen_name to id lookup with new data.')
288 | 			}
289 | 		  })
290 | 
291 | 		
292 | 		  const filteredAndSortedResults = results
293 | 		  .filter(({ weight }) => weight != null && !isNaN(weight))
294 | 		  .sort((a, b) => b.weight - a.weight)
295 | 		
296 | 
297 | 		const resultsJson = JSON.stringify(filteredAndSortedResults, null, 2)
298 | 		fs.writeFileSync('final_weights_with_pics.json', resultsJson, 'utf8')
299 | 
300 | 		console.log('Successfully saved profile images data to file.')
301 | 	} catch (err) {
302 | 		console.error('Error:', err)
303 | 	}
304 | })()
305 | 


--------------------------------------------------------------------------------
/preprocess_direct-messages.js:
--------------------------------------------------------------------------------
  1 | const fs = require('fs')
  2 | 
  3 | const getPokemonImageUrl = () => {
  4 | 	const baseUrl = 'https://assets.pokemon.com/assets/cms2/img/pokedex/full/'
  5 | 	const pokemonNumber = Math.floor(Math.random() * 1000)
  6 | 	// Convert to string and pad with zeros to ensure it is three digits
  7 | 	const paddedNumber = pokemonNumber.toString().padStart(3, '0')
  8 | 	return  `${baseUrl}${paddedNumber}.png`
  9 | }
 10 | 
 11 | // Read the file and remove the JavaScript assignment prefix
 12 | const userDetails = JSON.parse(fs.readFileSync('twitter-archive/data/account.js', 'utf8').replace('window.YTD.account.part0 = ', ''))
 13 | 
 14 | const [accountWrapper] = userDetails 
 15 | const account = accountWrapper.account 
 16 | const userName = account.username 
 17 | const accountId = account.accountId 
 18 | 
 19 | console.log(`Username: ${userName}, Account ID: ${accountId}`)
 20 | 
 21 | const userMentionsMapping = JSON.parse(fs.readFileSync('user_mentions_screen_name_mapping.json', 'utf8'))
 22 | 
 23 | // Extract the screenNameToId and idToScreenName mappings
 24 | const usernameToId = userMentionsMapping.screenNameToId
 25 | const idToUsername = userMentionsMapping.idToScreenName
 26 | 
 27 | 
 28 | console.log(Object.keys(idToUsername).length)
 29 | 
 30 | // Read the direct messages file
 31 | const dmData = JSON.parse(fs.readFileSync('twitter-archive/data/direct-messages.js', 'utf8').replace('window.YTD.direct_messages.part0 = ', ''))
 32 | 
 33 | const noMapping = []
 34 | 
 35 | // dm side, only id data
 36 | // no username
 37 | const processedConversations = dmData.map(conversation => {
 38 | 	const [a, b] = conversation.dmConversation.conversationId.split('-')
 39 | 	const recipientId = a === accountId ? b : a
 40 | 	// console.log(recipientId, idToUsername[recipientId])
 41 | 	const messages = conversation.dmConversation.messages
 42 | 
 43 | 	if (messages && messages.length === 0) return null
 44 | 
 45 | 
 46 | 	const firstMessage = messages[0].messageCreate
 47 | 	const lastMessage = messages[messages.length - 1].messageCreate
 48 | 
 49 | 	if (!idToUsername[recipientId]) {
 50 | 		noMapping.push(recipientId)
 51 | 	}
 52 | 
 53 | 	return {
 54 | 		conversationId: conversation.dmConversation.conversationId,
 55 | 		recipientId: recipientId,
 56 | 		recipientUsername: idToUsername[recipientId],
 57 | 		firstMessage: {
 58 | 			id: firstMessage?.id,
 59 | 			text: firstMessage?.text,
 60 | 			createdAt: firstMessage?.createdAt
 61 | 		},
 62 | 		lastMessage: {  
 63 | 			id: lastMessage?.id,
 64 | 			text: lastMessage?.text, 
 65 | 			createdAt: lastMessage?.createdAt
 66 | 		},
 67 | 		numMessages : messages.length
 68 | 	}
 69 | }).filter(item => item !== null)
 70 | 
 71 | 
 72 | // IMPORTANT
 73 | const sortedConversations = processedConversations
 74 | 	.filter(({ numMessages }) => numMessages != null && !isNaN(numMessages))
 75 | 	.sort((a, b) => b.numMessages - a.numMessages)
 76 | 
 77 | 
 78 | console.log(sortedConversations)
 79 | 
 80 | // New aggregation logic, keeping processedConversations intact
 81 | // saved as dm_sorted_by_message_count_and_last_message
 82 | const recipientAggregates = dmData.reduce((acc, conversation) => {
 83 | 	const messages = conversation.dmConversation.messages
 84 | 	const [a, b] = conversation.dmConversation.conversationId.split('-')
 85 | 	const recipientId = a === accountId ? b : a
 86 | 
 87 | 	if (!recipientId) {
 88 | 		console.log('Missing recipientId')
 89 | 		return acc // Continue to the next iteration without making changes
 90 | 	}
 91 | 	
 92 | 	const recipientUsername = idToUsername[recipientId] || `Unknown User ${recipientId}`
 93 | 
 94 | 
 95 | 	if (!acc[recipientId]) {
 96 | 		acc[recipientId] = { 
 97 | 			totalConversations: 0, 
 98 | 			totalMessages: 0, 
 99 | 			messagesSent: 0, 
100 | 			messagesReceived: 0, 
101 | 			imageSrc: null, 
102 | 			lastMessage: null, 
103 | 			recipientUsername: recipientUsername 
104 | 		}
105 | 	}
106 | 
107 | 	acc[recipientId].totalConversations += 1
108 | 	acc[recipientId].totalMessages += messages.length
109 | 
110 | 	// only goes through messages of that convo
111 | 	messages.forEach(message => {
112 | 		if (message.messageCreate?.senderId === accountId) {
113 | 			acc[recipientId].messagesSent += 1
114 | 		} else {
115 | 			acc[recipientId].messagesReceived += 1
116 | 		}
117 | 	})
118 | 
119 | 	// Determine the last message for this recipient
120 | 	const lastMessageInConversation = messages.reduce((latest, current) => {
121 | 		if (!current || !current.messageCreate) {
122 | 			console.log('skipping message due to current being null/undefined or missing messageCreate')
123 | 			return latest // Skip if no messageCreate property
124 | 		}
125 | 		const currentCreatedAt = new Date(current.messageCreate?.createdAt)
126 | 
127 | 		if (isNaN(currentCreatedAt.getTime())) {
128 | 			return latest // Skip if createdAt is not a valid date
129 | 		}
130 | 
131 | 		if (!latest || currentCreatedAt > new Date(latest.createdAt)) {
132 | 			return { text: current.messageCreate.text || '', createdAt: current.messageCreate.createdAt }
133 | 		}
134 | 		return latest
135 | 	}, acc[recipientId].lastMessage)
136 | 
137 | 	if (!acc[recipientId].lastMessage || new Date(lastMessageInConversation.createdAt) > new Date(acc[recipientId].lastMessage.createdAt)) {
138 | 		acc[recipientId].lastMessage = lastMessageInConversation
139 | 	}
140 | 
141 | 	return acc
142 | }, {})
143 | 
144 | 
145 | 
146 | // Convert the aggregated object into an array, sort it, and include imageSrc and lastMessage
147 | const sortedRecipientAggregates = Object.entries(recipientAggregates).map(([recipientId, stats]) => ({
148 | 	recipientId,
149 | 	...stats
150 | })).filter(item => item.totalMessages !== null && item.totalMessages !== undefined && !isNaN(item.totalMessages))
151 | 	.sort((a, b) => b.totalMessages - a.totalMessages)
152 | 
153 | console.log(sortedRecipientAggregates)
154 | 
155 | // Save the sorted data to dm_sorted_by_message_count_and_last_message
156 | const resultsJson = JSON.stringify(sortedRecipientAggregates, null, 2)
157 | fs.writeFileSync('dm_sorted_by_message_count_and_last_message.json', resultsJson, 'utf8')
158 | 
159 | // current time, decay exponent, and linear coefficient outside the loop
160 | const currentTime = new Date()
161 | const decayExponent = 0.5 // Adjust based on desired decay of older interactions
162 | const linearCoefficient = 0.05
163 | 
164 | // total weights for each recipient
165 | const recipientWeights = {}
166 | 
167 | // we use sortedConversations for weights because latest timestamp
168 | sortedConversations.forEach(convo => {
169 | 	// Calculate the time difference from the last message
170 | 	const lastMessageDate = new Date(convo.lastMessage.createdAt)
171 | 	const timeDiff = Math.max((currentTime - lastMessageDate) / (1000 * 60 * 60 * 24), 0) // Time difference in days
172 | 
173 | 	// Calculate the time weight using the decay factor
174 | 	const timeWeight = 1 / (Math.pow(timeDiff + 1, decayExponent) + linearCoefficient * timeDiff)
175 | 
176 | 	// Calculate the weight for this conversation
177 | 	const convoWeight = (convo.numMessages / 20) * timeWeight
178 | 
179 | 	if (recipientWeights[convo.recipientId]) { 
180 | 		recipientWeights[convo.recipientId].weight += convoWeight // change from convo.recipientUsername to convo.recipientId
181 | 	} else {
182 | 		recipientWeights[convo.recipientId] = { weight: convoWeight, twitterUsername: convo.recipientUsername } // change from convo.recipientUsername to convo.recipientId
183 | 	}
184 | })
185 | 
186 | const sortedArray = Object.entries(recipientWeights)
187 | 	.filter(([, value]) => value.weight !== null && value.weight !== undefined && !isNaN(value.weight))
188 | 	.sort((a, b) => {
189 | 		return b[1].weight - a[1].weight
190 | 	})
191 | 
192 | console.log(sortedArray.length)
193 | // Save the updated profileData back to the file
194 | const recipientWeightsJson = JSON.stringify(sortedArray, null, 2)
195 | fs.writeFileSync('sortedDmWeights.json', recipientWeightsJson, 'utf8')
196 | 
197 | // Final weight computation below this region
198 | 
199 | const mentionsDataRaw = fs.readFileSync('mentions_count_folder/mentionsCountWeighted.json', 'utf8')
200 | const mentionsData = JSON.parse(mentionsDataRaw)
201 | 
202 | let idx = 0 
203 | Object.entries(mentionsData).forEach(([username, {count, id}]) => {
204 | 
205 | 	// they are null because we don't have the userid to username mapping which relies on having atleast one mention (you have to reply)
206 | 	// edge case is if we don't have id (i.e they haven't replied on TL) and they talked a lot in DM
207 | 	idx += 1
208 | 	if (id === null) {
209 | 		const new_name = 'notfound'.concat(username)
210 | 		recipientWeights[new_name] = { weight: count, twitterUsername : username }
211 | 	} else if (recipientWeights[id]) {
212 | 		recipientWeights[id].weight += count 
213 | 	} else {
214 | 		recipientWeights[id] = { weight: count, twitterUsername : username }
215 | 	}
216 | })
217 | 
218 | 
219 | const reSortedArray = Object.entries(recipientWeights)
220 | 	.filter(([, value]) => value.weight != null && !isNaN(value.weight))
221 | 	.sort((a, b) => {
222 | 		return b[1].weight - a[1].weight 
223 | 	})
224 | 
225 | 
226 | const reSortedJson = JSON.stringify(reSortedArray, null, 2)
227 | fs.writeFileSync('sortedCombinedWeights.json', reSortedJson, 'utf8')
228 | 
229 | console.log(noMapping.length)
230 | 
231 | 


--------------------------------------------------------------------------------
/setup.sh:
--------------------------------------------------------------------------------
 1 | #!/bin/bash
 2 | 
 3 | # Set the script to exit immediately if any command fails
 4 | set -e
 5 | 
 6 | # Navigate to the script directory if necessary
 7 | # cd /path/to/your/js/files
 8 | 
 9 | # Run each JavaScript file in synchronous order
10 | 
11 | 
12 | 
13 | git pull
14 | 
15 | echo "Installing npm dependencies in case user missed..."
16 | npm install
17 | 
18 | echo "Running extract_mentions_and_dump.js"
19 | node extract_mentions_and_dump.js
20 | 
21 | echo "Running preprocess_direct-messages.js"
22 | node preprocess_direct-messages.js
23 | 
24 | echo "Running pfp_fetch_and_id_correction.js"
25 | node pfp_fetch_and_id_correction.js
26 | 
27 | echo "Running dm_final_stats_processing.js in the direct-messaging-stats directory"
28 | node direct-messaging-stats/dm_final_stats_processing.js
29 | 
30 | echo "All scripts have been executed successfully!"
31 | 
32 | 


--------------------------------------------------------------------------------
/start_server.js:
--------------------------------------------------------------------------------
 1 | const httpServer = require('http-server')
 2 | const port = 8080
 3 | 
 4 | const server = httpServer.createServer({
 5 | 	// Server options
 6 | 	cache: -1, // Disable caching for all files
 7 | 	setHeaders: (res) => {
 8 | 		// Disable caching for all files
 9 | 		res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate')
10 | 		res.setHeader('Pragma', 'no-cache')
11 | 		res.setHeader('Expires', '0')
12 | 	},
13 | })
14 | 
15 | server.listen(port, () => {
16 | 	console.log(`Server listening on port ${port}`)
17 | 
18 | 	// Dynamically import the 'open' package
19 | 	import('open').then((open) => {
20 | 		open.default(`http://localhost:${port}`)
21 | 	}).catch(err => console.error('Failed to load the open module', err))
22 | })


--------------------------------------------------------------------------------
/static/example2.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/sankalp1999/twitter-circle/30fc2533f844d1450db377e9391544b901469865/static/example2.png


--------------------------------------------------------------------------------
/static/image.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/sankalp1999/twitter-circle/30fc2533f844d1450db377e9391544b901469865/static/image.png


--------------------------------------------------------------------------------
/static/twitter-circle.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/sankalp1999/twitter-circle/30fc2533f844d1450db377e9391544b901469865/static/twitter-circle.png


--------------------------------------------------------------------------------
/static/user_example.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/sankalp1999/twitter-circle/30fc2533f844d1450db377e9391544b901469865/static/user_example.png


--------------------------------------------------------------------------------
/utils/fetch_user_id_to_user_name.js:
--------------------------------------------------------------------------------
  1 | const fs = require('fs')
  2 | const puppeteer = require('puppeteer')
  3 | 
  4 | const fetchTwitterProfileJsonLd = async (twitterUsername, browser) => {
  5 | 	const imgSrc = twitterUsername.imageSrc
  6 | 	const weight = twitterUsername.weight
  7 | 	twitterUsername = twitterUsername.twitterUsername
  8 | 	
  9 | 	if (imgSrc === null) {
 10 | 		console.log(`Profile not accessible or does not exist for ${twitterUsername}`)
 11 | 		return { twitterUsername: twitterUsername, profileJsonLd: 'dne', weight: weight }
 12 | 	}
 13 | 
 14 | 	const page = await browser.newPage()
 15 | 	await page.setRequestInterception(false)
 16 | 	await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36')
 17 | 	
 18 | 	await page.setRequestInterception(true)
 19 | 
 20 | 	// Add event listener to abort requests for stylesheets, images, and fonts
 21 | 	page.on('request', (request) => {
 22 | 		const resourceType = request.resourceType()
 23 | 		if (['stylesheet', 'image', 'font'].includes(resourceType)) {
 24 | 			request.abort()
 25 | 		} else {
 26 | 			request.continue()
 27 | 		}
 28 | 	})
 29 | 
 30 | 	try {
 31 | 		// Set a maximum duration for each request
 32 | 		const maxDuration = 5000 // 15 seconds
 33 | 
 34 | 		// go to the with_replies page to avoid redirect issue
 35 | 		await page.goto(`https://twitter.com/${twitterUsername}/with_replies`, { waitUntil: 'networkidle2' })
 36 | 
 37 | 
 38 | 		const currentUrl = page.url()
 39 | 		// Immediately check the page title from the head section
 40 | 		const title = await page.evaluate(() => document.querySelector('title')?.innerText)
 41 | 		const textExists = await page.evaluate(() => {
 42 | 			return document.body.textContent.includes('This account doesn’t exist')
 43 | 		})
 44 | 
 45 | 		// If the title indicates a non-accessible profile, return null for profileJsonLd
 46 | 		if (textExists || title === 'Profile / X' || title === 'Log in to X / X' || currentUrl.includes('redirect_after_login')) {
 47 | 			console.log(`Profile not accessible or does not exist for ${twitterUsername}`)
 48 | 			if (title === 'Log in to X / X' || currentUrl.includes('redirect_after_login')) {
 49 | 				return { twitterUsername: twitterUsername, profileJsonLd: 'redirect_case', weight: weight}
 50 | 			}
 51 | 			return { twitterUsername: twitterUsername, profileJsonLd: 'dne', weight: weight }
 52 | 		}
 53 | 
 54 | 		// Wait for the JSON-LD script tag and extract content
 55 | 		const jsonLdContent = await page.waitForSelector('script[type="application/ld+json"]', { timeout: maxDuration })
 56 | 			.then(() => page.evaluate(() => {
 57 | 				const scriptElement = document.querySelector('script[type="application/ld+json"]')
 58 | 				return scriptElement ? JSON.parse(scriptElement.innerText) : null
 59 | 			}))
 60 | 
 61 | 		console.log(`JSON-LD content fetched for ${twitterUsername}`)
 62 | 		return { twitterUsername: twitterUsername, profileJsonLd: jsonLdContent, weight: weight }
 63 | 	} catch (error) {
 64 | 		console.error(`Error fetching JSON-LD content for ${twitterUsername}: ${error.message}`)
 65 | 		return { twitterUsername: twitterUsername, profileJsonLd: null, weight: weight }
 66 | 	} finally {
 67 | 		await page.close()
 68 | 	}
 69 | }
 70 | 
 71 | const chunkArray = (array, size) => {
 72 | 	const chunkedArr = []
 73 | 	for (let i = 0; i < array.length; i += size) {
 74 | 		chunkedArr.push(array.slice(i, i + size))
 75 | 	}
 76 | 	return chunkedArr
 77 | }
 78 | 
 79 | const processChunk = async (chunk, browser) => {
 80 | 	return await Promise.allSettled(chunk.map(username => 
 81 | 		fetchTwitterProfileJsonLd(username, browser)
 82 | 	)).then(results => results.map((result, index) => result.status === 'fulfilled' ? result.value : { 
 83 | 		twitterUsername: chunk[index], 
 84 | 		profileJsonLd: null
 85 | 	}))
 86 | }
 87 | 
 88 | 
 89 | const filePath = 'pfp_dict.json'; // This file should contain an array of Twitter usernames
 90 | 
 91 | (async () => {
 92 | 	try {
 93 | 		const jsonString = fs.readFileSync(filePath, 'utf8')
 94 | 		let usernames = JSON.parse(jsonString)
 95 | 		usernames = usernames.slice(0, 400)
 96 | 		const chunks = chunkArray(usernames, 10) // Adjust chunk size as needed
 97 | 		let results = []
 98 | 
 99 | 		for (const chunk of chunks) {
100 | 			const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox', '--disable-setuid-sandbox'] })
101 | 			console.log(`Processing a chunk of ${chunk.length} usernames...`)
102 | 			const chunkResults = await processChunk(chunk, browser)
103 | 			results = results.concat(chunkResults)
104 | 			await browser.close() 
105 | 
106 | 		}
107 | 
108 | 		const resultsJson = JSON.stringify(results, null, 2)
109 | 		fs.writeFileSync('headContent_dict.json', resultsJson, 'utf8')
110 | 		console.log('Successfully saved head content data to file.')
111 | 	} catch (err) {
112 | 		console.error('Error:', err)
113 | 	}
114 | })()


--------------------------------------------------------------------------------
